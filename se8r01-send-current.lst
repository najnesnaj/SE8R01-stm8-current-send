                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 3.4.0 #8981 (Jul 11 2014) (Linux)
                                      4 ; This file was generated Wed May 10 11:56:05 2017
                                      5 ;--------------------------------------------------------
                                      6 	.module se8r01_send_current
                                      7 	.optsdcc -mstm8
                                      8 	
                                      9 ;--------------------------------------------------------
                                     10 ; Public variables in this module
                                     11 ;--------------------------------------------------------
                                     12 	.globl _main
                                     13 	.globl _SE8R01_Init
                                     14 	.globl _SE8R01_Analog_Init
                                     15 	.globl _SE8R01_Calibration
                                     16 	.globl _rf_switch_bank
                                     17 	.globl _init_io
                                     18 	.globl _InitializeUART
                                     19 	.globl _print_UCHAR_hex
                                     20 	.globl _UARTPrintF
                                     21 	.globl _delay
                                     22 	.globl _InitializeSystemClock
                                     23 	.globl _InitializeSPI
                                     24 	.globl _read_spi_buf
                                     25 	.globl _write_spi_buf
                                     26 	.globl _read_spi_reg
                                     27 	.globl _write_spi_reg
                                     28 	.globl _write_spi
                                     29 	.globl _delayTenMicro
                                     30 	.globl _memset
                                     31 	.globl _tx_buf
                                     32 	.globl _rx_buf
                                     33 	.globl _ADDRESS0
                                     34 	.globl _ADDRESS1
                                     35 	.globl _ADDRESS5
                                     36 	.globl _ADDRESS4
                                     37 	.globl _ADDRESS3
                                     38 	.globl _ADDRESS2
                                     39 	.globl _TX_ADDRESS
                                     40 	.globl _status
                                     41 	.globl _pip
                                     42 	.globl _signal_lv
                                     43 	.globl _newdata
                                     44 	.globl _pload_width_now
                                     45 	.globl _SE8R01_DR_500K
                                     46 	.globl _SE8R01_DR_1M
                                     47 	.globl _SE8R01_DR_2M
                                     48 	.globl _myData_pip4
                                     49 	.globl _myData_pip5
                                     50 	.globl _gtemp
                                     51 ;--------------------------------------------------------
                                     52 ; ram data
                                     53 ;--------------------------------------------------------
                                     54 	.area DATA
      000000                         55 _gtemp::
      000000                         56 	.ds 5
      000005                         57 _myData_pip5::
      000005                         58 	.ds 5
      00000A                         59 _myData_pip4::
      00000A                         60 	.ds 5
                                     61 ;--------------------------------------------------------
                                     62 ; ram data
                                     63 ;--------------------------------------------------------
                                     64 	.area INITIALIZED
      000000                         65 _SE8R01_DR_2M::
      000000                         66 	.ds 2
      000002                         67 _SE8R01_DR_1M::
      000002                         68 	.ds 2
      000004                         69 _SE8R01_DR_500K::
      000004                         70 	.ds 2
      000006                         71 _pload_width_now::
      000006                         72 	.ds 2
      000008                         73 _newdata::
      000008                         74 	.ds 2
      00000A                         75 _signal_lv::
      00000A                         76 	.ds 1
      00000B                         77 _pip::
      00000B                         78 	.ds 2
      00000D                         79 _status::
      00000D                         80 	.ds 1
      00000E                         81 _TX_ADDRESS::
      00000E                         82 	.ds 4
      000012                         83 _ADDRESS2::
      000012                         84 	.ds 1
      000013                         85 _ADDRESS3::
      000013                         86 	.ds 1
      000014                         87 _ADDRESS4::
      000014                         88 	.ds 1
      000015                         89 _ADDRESS5::
      000015                         90 	.ds 1
      000016                         91 _ADDRESS1::
      000016                         92 	.ds 4
      00001A                         93 _ADDRESS0::
      00001A                         94 	.ds 4
      00001E                         95 _rx_buf::
      00001E                         96 	.ds 32
      00003E                         97 _tx_buf::
      00003E                         98 	.ds 32
                                     99 ;--------------------------------------------------------
                                    100 ; Stack segment in internal ram 
                                    101 ;--------------------------------------------------------
                                    102 	.area	SSEG
      000000                        103 __start__stack:
      000000                        104 	.ds	1
                                    105 
                                    106 ;--------------------------------------------------------
                                    107 ; absolute external ram data
                                    108 ;--------------------------------------------------------
                                    109 	.area DABS (ABS)
                                    110 ;--------------------------------------------------------
                                    111 ; interrupt vector 
                                    112 ;--------------------------------------------------------
                                    113 	.area HOME
      000000                        114 __interrupt_vect:
      000000 82v00u00u00            115 	int s_GSINIT ;reset
      000004 82 00 00 00            116 	int 0x0000 ;trap
      000008 82 00 00 00            117 	int 0x0000 ;int0
      00000C 82 00 00 00            118 	int 0x0000 ;int1
      000010 82 00 00 00            119 	int 0x0000 ;int2
      000014 82 00 00 00            120 	int 0x0000 ;int3
      000018 82 00 00 00            121 	int 0x0000 ;int4
      00001C 82 00 00 00            122 	int 0x0000 ;int5
      000020 82 00 00 00            123 	int 0x0000 ;int6
      000024 82 00 00 00            124 	int 0x0000 ;int7
      000028 82 00 00 00            125 	int 0x0000 ;int8
      00002C 82 00 00 00            126 	int 0x0000 ;int9
      000030 82 00 00 00            127 	int 0x0000 ;int10
      000034 82 00 00 00            128 	int 0x0000 ;int11
      000038 82 00 00 00            129 	int 0x0000 ;int12
      00003C 82 00 00 00            130 	int 0x0000 ;int13
      000040 82 00 00 00            131 	int 0x0000 ;int14
      000044 82 00 00 00            132 	int 0x0000 ;int15
      000048 82 00 00 00            133 	int 0x0000 ;int16
      00004C 82 00 00 00            134 	int 0x0000 ;int17
      000050 82 00 00 00            135 	int 0x0000 ;int18
      000054 82 00 00 00            136 	int 0x0000 ;int19
      000058 82 00 00 00            137 	int 0x0000 ;int20
      00005C 82 00 00 00            138 	int 0x0000 ;int21
      000060 82 00 00 00            139 	int 0x0000 ;int22
      000064 82 00 00 00            140 	int 0x0000 ;int23
      000068 82 00 00 00            141 	int 0x0000 ;int24
      00006C 82 00 00 00            142 	int 0x0000 ;int25
      000070 82 00 00 00            143 	int 0x0000 ;int26
      000074 82 00 00 00            144 	int 0x0000 ;int27
      000078 82 00 00 00            145 	int 0x0000 ;int28
      00007C 82 00 00 00            146 	int 0x0000 ;int29
                                    147 ;--------------------------------------------------------
                                    148 ; global & static initialisations
                                    149 ;--------------------------------------------------------
                                    150 	.area HOME
                                    151 	.area GSINIT
                                    152 	.area GSFINAL
                                    153 	.area GSINIT
      000000                        154 __sdcc_gs_init_startup:
      000000                        155 __sdcc_init_data:
                                    156 ; stm8_genXINIT() start
      000000 AEr00r00         [ 2]  157 	ldw x, #l_DATA
      000003 27 07            [ 1]  158 	jreq	00002$
      000005                        159 00001$:
      000005 72 4FuFFuFF      [ 1]  160 	clr (s_DATA - 1, x)
      000009 5A               [ 2]  161 	decw x
      00000A 26 F9            [ 1]  162 	jrne	00001$
      00000C                        163 00002$:
      00000C AEr00r00         [ 2]  164 	ldw	x, #l_INITIALIZER
      00000F 27 09            [ 1]  165 	jreq	00004$
      000011                        166 00003$:
      000011 D6uFFuFF         [ 1]  167 	ld	a, (s_INITIALIZER - 1, x)
      000014 D7uFFuFF         [ 1]  168 	ld	(s_INITIALIZED - 1, x), a
      000017 5A               [ 2]  169 	decw	x
      000018 26 F7            [ 1]  170 	jrne	00003$
      00001A                        171 00004$:
                                    172 ; stm8_genXINIT() end
                                    173 	.area GSFINAL
      000000 CCr00r80         [ 2]  174 	jp	__sdcc_program_startup
                                    175 ;--------------------------------------------------------
                                    176 ; Home
                                    177 ;--------------------------------------------------------
                                    178 	.area HOME
                                    179 	.area HOME
      000080                        180 __sdcc_program_startup:
      000080 CCr06rEA         [ 2]  181 	jp	_main
                                    182 ;	return from main will return to caller
                                    183 ;--------------------------------------------------------
                                    184 ; code
                                    185 ;--------------------------------------------------------
                                    186 	.area CODE
                                    187 ;	se8r01-send-current.c: 46: void delayTenMicro (void) {
                                    188 ;	-----------------------------------------
                                    189 ;	 function delayTenMicro
                                    190 ;	-----------------------------------------
      000000                        191 _delayTenMicro:
                                    192 ;	se8r01-send-current.c: 48: for (a = 0; a < 50; ++a)
      000000 A6 32            [ 1]  193 	ld	a, #0x32
      000002                        194 00104$:
                                    195 ;	se8r01-send-current.c: 49: __asm__("nop");
      000002 9D               [ 1]  196 	nop
      000003 4A               [ 1]  197 	dec	a
                                    198 ;	se8r01-send-current.c: 48: for (a = 0; a < 50; ++a)
      000004 4D               [ 1]  199 	tnz	a
      000005 26 FB            [ 1]  200 	jrne	00104$
      000007 81               [ 4]  201 	ret
                                    202 ;	se8r01-send-current.c: 51: UCHAR write_spi (UCHAR value) {
                                    203 ;	-----------------------------------------
                                    204 ;	 function write_spi
                                    205 ;	-----------------------------------------
      000008                        206 _write_spi:
                                    207 ;	se8r01-send-current.c: 53: delayTenMicro ();
      000008 CDr00r00         [ 4]  208 	call	_delayTenMicro
                                    209 ;	se8r01-send-current.c: 54: SPI_DR = value;
      00000B AE 52 04         [ 2]  210 	ldw	x, #0x5204
      00000E 7B 03            [ 1]  211 	ld	a, (0x03, sp)
      000010 F7               [ 1]  212 	ld	(x), a
                                    213 ;	se8r01-send-current.c: 55: delayTenMicro ();
      000011 CDr00r00         [ 4]  214 	call	_delayTenMicro
                                    215 ;	se8r01-send-current.c: 56: while ((SPI_SR & TXE) == 0);
      000014                        216 00101$:
      000014 AE 52 03         [ 2]  217 	ldw	x, #0x5203
      000017 F6               [ 1]  218 	ld	a, (x)
      000018 A5 02            [ 1]  219 	bcp	a, #0x02
      00001A 27 F8            [ 1]  220 	jreq	00101$
                                    221 ;	se8r01-send-current.c: 57: delayTenMicro ();
      00001C CDr00r00         [ 4]  222 	call	_delayTenMicro
                                    223 ;	se8r01-send-current.c: 58: while ((SPI_SR & RXNE) == 0);
      00001F                        224 00104$:
      00001F AE 52 03         [ 2]  225 	ldw	x, #0x5203
      000022 F6               [ 1]  226 	ld	a, (x)
      000023 44               [ 1]  227 	srl	a
      000024 24 F9            [ 1]  228 	jrnc	00104$
                                    229 ;	se8r01-send-current.c: 59: delayTenMicro ();
      000026 CDr00r00         [ 4]  230 	call	_delayTenMicro
                                    231 ;	se8r01-send-current.c: 60: ret = SPI_DR;
      000029 AE 52 04         [ 2]  232 	ldw	x, #0x5204
      00002C F6               [ 1]  233 	ld	a, (x)
                                    234 ;	se8r01-send-current.c: 61: return (ret);
      00002D 81               [ 4]  235 	ret
                                    236 ;	se8r01-send-current.c: 63: UCHAR write_spi_reg (UCHAR reg, UCHAR value) {
                                    237 ;	-----------------------------------------
                                    238 ;	 function write_spi_reg
                                    239 ;	-----------------------------------------
      00002E                        240 _write_spi_reg:
      00002E 88               [ 1]  241 	push	a
                                    242 ;	se8r01-send-current.c: 65: PC_ODR &= ~(1 << CSN);
      00002F AE 50 0A         [ 2]  243 	ldw	x, #0x500a
      000032 F6               [ 1]  244 	ld	a, (x)
      000033 A4 F7            [ 1]  245 	and	a, #0xf7
      000035 F7               [ 1]  246 	ld	(x), a
                                    247 ;	se8r01-send-current.c: 66: ret = write_spi (reg);
      000036 7B 04            [ 1]  248 	ld	a, (0x04, sp)
      000038 88               [ 1]  249 	push	a
      000039 CDr00r08         [ 4]  250 	call	_write_spi
      00003C 5B 01            [ 2]  251 	addw	sp, #1
      00003E 6B 01            [ 1]  252 	ld	(0x01, sp), a
                                    253 ;	se8r01-send-current.c: 67: if (reg != NOP && reg != FLUSH_RX && reg != FLUSH_TX)
      000040 7B 04            [ 1]  254 	ld	a, (0x04, sp)
      000042 A1 FF            [ 1]  255 	cp	a, #0xff
      000044 27 15            [ 1]  256 	jreq	00102$
      000046 7B 04            [ 1]  257 	ld	a, (0x04, sp)
      000048 A1 E2            [ 1]  258 	cp	a, #0xe2
      00004A 27 0F            [ 1]  259 	jreq	00102$
      00004C 7B 04            [ 1]  260 	ld	a, (0x04, sp)
      00004E A1 E1            [ 1]  261 	cp	a, #0xe1
      000050 27 09            [ 1]  262 	jreq	00102$
                                    263 ;	se8r01-send-current.c: 68: write_spi (value);
      000052 7B 05            [ 1]  264 	ld	a, (0x05, sp)
      000054 88               [ 1]  265 	push	a
      000055 CDr00r08         [ 4]  266 	call	_write_spi
      000058 84               [ 1]  267 	pop	a
      000059 20 03            [ 2]  268 	jra	00103$
      00005B                        269 00102$:
                                    270 ;	se8r01-send-current.c: 70: delayTenMicro ();
      00005B CDr00r00         [ 4]  271 	call	_delayTenMicro
      00005E                        272 00103$:
                                    273 ;	se8r01-send-current.c: 71: PC_ODR |= (1 << CSN);
      00005E AE 50 0A         [ 2]  274 	ldw	x, #0x500a
      000061 F6               [ 1]  275 	ld	a, (x)
      000062 AA 08            [ 1]  276 	or	a, #0x08
      000064 F7               [ 1]  277 	ld	(x), a
                                    278 ;	se8r01-send-current.c: 72: return (ret);
      000065 7B 01            [ 1]  279 	ld	a, (0x01, sp)
      000067 5B 01            [ 2]  280 	addw	sp, #1
      000069 81               [ 4]  281 	ret
                                    282 ;	se8r01-send-current.c: 74: UCHAR read_spi_reg (UCHAR reg) {
                                    283 ;	-----------------------------------------
                                    284 ;	 function read_spi_reg
                                    285 ;	-----------------------------------------
      00006A                        286 _read_spi_reg:
      00006A 88               [ 1]  287 	push	a
                                    288 ;	se8r01-send-current.c: 76: PC_ODR &= ~(1 << CSN);
      00006B AE 50 0A         [ 2]  289 	ldw	x, #0x500a
      00006E F6               [ 1]  290 	ld	a, (x)
      00006F A4 F7            [ 1]  291 	and	a, #0xf7
      000071 F7               [ 1]  292 	ld	(x), a
                                    293 ;	se8r01-send-current.c: 77: ret = write_spi (reg);
      000072 7B 04            [ 1]  294 	ld	a, (0x04, sp)
      000074 88               [ 1]  295 	push	a
      000075 CDr00r08         [ 4]  296 	call	_write_spi
      000078 5B 01            [ 2]  297 	addw	sp, #1
      00007A 6B 01            [ 1]  298 	ld	(0x01, sp), a
                                    299 ;	se8r01-send-current.c: 78: if (reg != NOP && reg != FLUSH_RX && reg != FLUSH_TX)
      00007C 7B 04            [ 1]  300 	ld	a, (0x04, sp)
      00007E A1 FF            [ 1]  301 	cp	a, #0xff
      000080 27 17            [ 1]  302 	jreq	00102$
      000082 7B 04            [ 1]  303 	ld	a, (0x04, sp)
      000084 A1 E2            [ 1]  304 	cp	a, #0xe2
      000086 27 11            [ 1]  305 	jreq	00102$
      000088 7B 04            [ 1]  306 	ld	a, (0x04, sp)
      00008A A1 E1            [ 1]  307 	cp	a, #0xe1
      00008C 27 0B            [ 1]  308 	jreq	00102$
                                    309 ;	se8r01-send-current.c: 79: ret = write_spi (NOP);
      00008E 4B FF            [ 1]  310 	push	#0xff
      000090 CDr00r08         [ 4]  311 	call	_write_spi
      000093 5B 01            [ 2]  312 	addw	sp, #1
      000095 6B 01            [ 1]  313 	ld	(0x01, sp), a
      000097 20 03            [ 2]  314 	jra	00103$
      000099                        315 00102$:
                                    316 ;	se8r01-send-current.c: 81: delayTenMicro ();
      000099 CDr00r00         [ 4]  317 	call	_delayTenMicro
      00009C                        318 00103$:
                                    319 ;	se8r01-send-current.c: 82: PC_ODR |= (1 << CSN);
      00009C AE 50 0A         [ 2]  320 	ldw	x, #0x500a
      00009F F6               [ 1]  321 	ld	a, (x)
      0000A0 AA 08            [ 1]  322 	or	a, #0x08
      0000A2 F7               [ 1]  323 	ld	(x), a
                                    324 ;	se8r01-send-current.c: 83: return (ret);
      0000A3 7B 01            [ 1]  325 	ld	a, (0x01, sp)
      0000A5 5B 01            [ 2]  326 	addw	sp, #1
      0000A7 81               [ 4]  327 	ret
                                    328 ;	se8r01-send-current.c: 85: UCHAR write_spi_buf (UCHAR reg, UCHAR *array, UCHAR len) {
                                    329 ;	-----------------------------------------
                                    330 ;	 function write_spi_buf
                                    331 ;	-----------------------------------------
      0000A8                        332 _write_spi_buf:
      0000A8 52 02            [ 2]  333 	sub	sp, #2
                                    334 ;	se8r01-send-current.c: 87: PC_ODR &= ~(1 << CSN);
      0000AA AE 50 0A         [ 2]  335 	ldw	x, #0x500a
      0000AD F6               [ 1]  336 	ld	a, (x)
      0000AE A4 F7            [ 1]  337 	and	a, #0xf7
      0000B0 F7               [ 1]  338 	ld	(x), a
                                    339 ;	se8r01-send-current.c: 88: ret = write_spi (reg);
      0000B1 7B 05            [ 1]  340 	ld	a, (0x05, sp)
      0000B3 88               [ 1]  341 	push	a
      0000B4 CDr00r08         [ 4]  342 	call	_write_spi
      0000B7 5B 01            [ 2]  343 	addw	sp, #1
      0000B9 6B 02            [ 1]  344 	ld	(0x02, sp), a
                                    345 ;	se8r01-send-current.c: 89: for (n = 0; n < len; ++n)
      0000BB 0F 01            [ 1]  346 	clr	(0x01, sp)
      0000BD                        347 00103$:
      0000BD 7B 01            [ 1]  348 	ld	a, (0x01, sp)
      0000BF 11 08            [ 1]  349 	cp	a, (0x08, sp)
      0000C1 24 11            [ 1]  350 	jrnc	00101$
                                    351 ;	se8r01-send-current.c: 90: write_spi (array[n]);
      0000C3 5F               [ 1]  352 	clrw	x
      0000C4 7B 01            [ 1]  353 	ld	a, (0x01, sp)
      0000C6 97               [ 1]  354 	ld	xl, a
      0000C7 72 FB 06         [ 2]  355 	addw	x, (0x06, sp)
      0000CA F6               [ 1]  356 	ld	a, (x)
      0000CB 88               [ 1]  357 	push	a
      0000CC CDr00r08         [ 4]  358 	call	_write_spi
      0000CF 84               [ 1]  359 	pop	a
                                    360 ;	se8r01-send-current.c: 89: for (n = 0; n < len; ++n)
      0000D0 0C 01            [ 1]  361 	inc	(0x01, sp)
      0000D2 20 E9            [ 2]  362 	jra	00103$
      0000D4                        363 00101$:
                                    364 ;	se8r01-send-current.c: 91: PC_ODR |= (1 << CSN);
      0000D4 AE 50 0A         [ 2]  365 	ldw	x, #0x500a
      0000D7 F6               [ 1]  366 	ld	a, (x)
      0000D8 AA 08            [ 1]  367 	or	a, #0x08
      0000DA F7               [ 1]  368 	ld	(x), a
                                    369 ;	se8r01-send-current.c: 92: return (ret);
      0000DB 7B 02            [ 1]  370 	ld	a, (0x02, sp)
      0000DD 5B 02            [ 2]  371 	addw	sp, #2
      0000DF 81               [ 4]  372 	ret
                                    373 ;	se8r01-send-current.c: 94: UCHAR read_spi_buf (UCHAR reg, UCHAR *array, UCHAR len) {
                                    374 ;	-----------------------------------------
                                    375 ;	 function read_spi_buf
                                    376 ;	-----------------------------------------
      0000E0                        377 _read_spi_buf:
      0000E0 52 02            [ 2]  378 	sub	sp, #2
                                    379 ;	se8r01-send-current.c: 96: PC_ODR &= ~(1 << CSN);
      0000E2 AE 50 0A         [ 2]  380 	ldw	x, #0x500a
      0000E5 F6               [ 1]  381 	ld	a, (x)
      0000E6 A4 F7            [ 1]  382 	and	a, #0xf7
      0000E8 F7               [ 1]  383 	ld	(x), a
                                    384 ;	se8r01-send-current.c: 97: ret = write_spi (reg);
      0000E9 7B 05            [ 1]  385 	ld	a, (0x05, sp)
      0000EB 88               [ 1]  386 	push	a
      0000EC CDr00r08         [ 4]  387 	call	_write_spi
      0000EF 5B 01            [ 2]  388 	addw	sp, #1
      0000F1 6B 01            [ 1]  389 	ld	(0x01, sp), a
                                    390 ;	se8r01-send-current.c: 98: for (n = 0; n < len; ++n)
      0000F3 0F 02            [ 1]  391 	clr	(0x02, sp)
      0000F5                        392 00103$:
      0000F5 7B 02            [ 1]  393 	ld	a, (0x02, sp)
      0000F7 11 08            [ 1]  394 	cp	a, (0x08, sp)
      0000F9 24 15            [ 1]  395 	jrnc	00101$
                                    396 ;	se8r01-send-current.c: 99: array[n] = write_spi (NOP);
      0000FB 5F               [ 1]  397 	clrw	x
      0000FC 7B 02            [ 1]  398 	ld	a, (0x02, sp)
      0000FE 97               [ 1]  399 	ld	xl, a
      0000FF 72 FB 06         [ 2]  400 	addw	x, (0x06, sp)
      000102 89               [ 2]  401 	pushw	x
      000103 4B FF            [ 1]  402 	push	#0xff
      000105 CDr00r08         [ 4]  403 	call	_write_spi
      000108 5B 01            [ 2]  404 	addw	sp, #1
      00010A 85               [ 2]  405 	popw	x
      00010B F7               [ 1]  406 	ld	(x), a
                                    407 ;	se8r01-send-current.c: 98: for (n = 0; n < len; ++n)
      00010C 0C 02            [ 1]  408 	inc	(0x02, sp)
      00010E 20 E5            [ 2]  409 	jra	00103$
      000110                        410 00101$:
                                    411 ;	se8r01-send-current.c: 100: PC_ODR |= (1 << CSN);
      000110 AE 50 0A         [ 2]  412 	ldw	x, #0x500a
      000113 F6               [ 1]  413 	ld	a, (x)
      000114 AA 08            [ 1]  414 	or	a, #0x08
      000116 F7               [ 1]  415 	ld	(x), a
                                    416 ;	se8r01-send-current.c: 101: return (ret);
      000117 7B 01            [ 1]  417 	ld	a, (0x01, sp)
      000119 5B 02            [ 2]  418 	addw	sp, #2
      00011B 81               [ 4]  419 	ret
                                    420 ;	se8r01-send-current.c: 103: void InitializeSPI () {
                                    421 ;	-----------------------------------------
                                    422 ;	 function InitializeSPI
                                    423 ;	-----------------------------------------
      00011C                        424 _InitializeSPI:
                                    425 ;	se8r01-send-current.c: 104: SPI_CR1 = MSBFIRST | SPI_ENABLE | BR_DIV256 | MASTER | CPOL0 | CPHA0;
      00011C AE 52 00         [ 2]  426 	ldw	x, #0x5200
      00011F A6 7C            [ 1]  427 	ld	a, #0x7c
      000121 F7               [ 1]  428 	ld	(x), a
                                    429 ;	se8r01-send-current.c: 105: SPI_CR2 = BDM_2LINE | CRCEN_OFF | CRCNEXT_TXBUF | FULL_DUPLEX | SSM_DISABLE;
      000122 AE 52 01         [ 2]  430 	ldw	x, #0x5201
      000125 7F               [ 1]  431 	clr	(x)
                                    432 ;	se8r01-send-current.c: 106: SPI_ICR = TXIE_MASKED | RXIE_MASKED | ERRIE_MASKED | WKIE_MASKED;
      000126 AE 52 02         [ 2]  433 	ldw	x, #0x5202
      000129 7F               [ 1]  434 	clr	(x)
                                    435 ;	se8r01-send-current.c: 107: PC_DDR = (1 << PC3) | (1 << PC4); // output mode
      00012A AE 50 0C         [ 2]  436 	ldw	x, #0x500c
      00012D A6 18            [ 1]  437 	ld	a, #0x18
      00012F F7               [ 1]  438 	ld	(x), a
                                    439 ;	se8r01-send-current.c: 108: PC_CR1 = (1 << PC3) | (1 << PC4); // push-pull
      000130 AE 50 0D         [ 2]  440 	ldw	x, #0x500d
      000133 A6 18            [ 1]  441 	ld	a, #0x18
      000135 F7               [ 1]  442 	ld	(x), a
                                    443 ;	se8r01-send-current.c: 109: PC_CR2 = (1 << PC3) | (1 << PC4); // up to 10MHz speed
      000136 AE 50 0E         [ 2]  444 	ldw	x, #0x500e
      000139 A6 18            [ 1]  445 	ld	a, #0x18
      00013B F7               [ 1]  446 	ld	(x), a
                                    447 ;	se8r01-send-current.c: 111: PC_ODR &= ~(1 << CE);
      00013C AE 50 0A         [ 2]  448 	ldw	x, #0x500a
      00013F F6               [ 1]  449 	ld	a, (x)
      000140 A4 EF            [ 1]  450 	and	a, #0xef
      000142 F7               [ 1]  451 	ld	(x), a
      000143 81               [ 4]  452 	ret
                                    453 ;	se8r01-send-current.c: 113: void InitializeSystemClock() {
                                    454 ;	-----------------------------------------
                                    455 ;	 function InitializeSystemClock
                                    456 ;	-----------------------------------------
      000144                        457 _InitializeSystemClock:
                                    458 ;	se8r01-send-current.c: 114: CLK_ICKR = 0;                       //  Reset the Internal Clock Register.
      000144 AE 50 C0         [ 2]  459 	ldw	x, #0x50c0
      000147 7F               [ 1]  460 	clr	(x)
                                    461 ;	se8r01-send-current.c: 115: CLK_ICKR = CLK_HSIEN;               //  Enable the HSI.
      000148 AE 50 C0         [ 2]  462 	ldw	x, #0x50c0
      00014B A6 01            [ 1]  463 	ld	a, #0x01
      00014D F7               [ 1]  464 	ld	(x), a
                                    465 ;	se8r01-send-current.c: 116: CLK_ECKR = 0;                       //  Disable the external clock.
      00014E AE 50 C1         [ 2]  466 	ldw	x, #0x50c1
      000151 7F               [ 1]  467 	clr	(x)
                                    468 ;	se8r01-send-current.c: 117: while ((CLK_ICKR & CLK_HSIRDY) == 0);       //  Wait for the HSI to be ready for use.
      000152                        469 00101$:
      000152 AE 50 C0         [ 2]  470 	ldw	x, #0x50c0
      000155 F6               [ 1]  471 	ld	a, (x)
      000156 A5 02            [ 1]  472 	bcp	a, #0x02
      000158 27 F8            [ 1]  473 	jreq	00101$
                                    474 ;	se8r01-send-current.c: 118: CLK_CKDIVR = 0;                     //  Ensure the clocks are running at full speed.
      00015A AE 50 C6         [ 2]  475 	ldw	x, #0x50c6
      00015D 7F               [ 1]  476 	clr	(x)
                                    477 ;	se8r01-send-current.c: 119: CLK_PCKENR1 = 0xff;                 //  Enable all peripheral clocks.
      00015E AE 50 C7         [ 2]  478 	ldw	x, #0x50c7
      000161 A6 FF            [ 1]  479 	ld	a, #0xff
      000163 F7               [ 1]  480 	ld	(x), a
                                    481 ;	se8r01-send-current.c: 120: CLK_PCKENR2 = 0xff;                 //  Ditto.
      000164 AE 50 CA         [ 2]  482 	ldw	x, #0x50ca
      000167 A6 FF            [ 1]  483 	ld	a, #0xff
      000169 F7               [ 1]  484 	ld	(x), a
                                    485 ;	se8r01-send-current.c: 121: CLK_CCOR = 0;                       //  Turn off CCO.
      00016A AE 50 C9         [ 2]  486 	ldw	x, #0x50c9
      00016D 7F               [ 1]  487 	clr	(x)
                                    488 ;	se8r01-send-current.c: 122: CLK_HSITRIMR = 0;                   //  Turn off any HSIU trimming.
      00016E AE 50 CC         [ 2]  489 	ldw	x, #0x50cc
      000171 7F               [ 1]  490 	clr	(x)
                                    491 ;	se8r01-send-current.c: 123: CLK_SWIMCCR = 0;                    //  Set SWIM to run at clock / 2.
      000172 AE 50 CD         [ 2]  492 	ldw	x, #0x50cd
      000175 7F               [ 1]  493 	clr	(x)
                                    494 ;	se8r01-send-current.c: 124: CLK_SWR = 0xe1;                     //  Use HSI as the clock source.
      000176 AE 50 C4         [ 2]  495 	ldw	x, #0x50c4
      000179 A6 E1            [ 1]  496 	ld	a, #0xe1
      00017B F7               [ 1]  497 	ld	(x), a
                                    498 ;	se8r01-send-current.c: 125: CLK_SWCR = 0;                       //  Reset the clock switch control register.
      00017C AE 50 C5         [ 2]  499 	ldw	x, #0x50c5
      00017F 7F               [ 1]  500 	clr	(x)
                                    501 ;	se8r01-send-current.c: 126: CLK_SWCR = CLK_SWEN;                //  Enable switching.
      000180 AE 50 C5         [ 2]  502 	ldw	x, #0x50c5
      000183 A6 02            [ 1]  503 	ld	a, #0x02
      000185 F7               [ 1]  504 	ld	(x), a
                                    505 ;	se8r01-send-current.c: 127: while ((CLK_SWCR & CLK_SWBSY) != 0);        //  Pause while the clock switch is busy.
      000186                        506 00104$:
      000186 AE 50 C5         [ 2]  507 	ldw	x, #0x50c5
      000189 F6               [ 1]  508 	ld	a, (x)
      00018A 44               [ 1]  509 	srl	a
      00018B 25 F9            [ 1]  510 	jrc	00104$
      00018D 81               [ 4]  511 	ret
                                    512 ;	se8r01-send-current.c: 129: void delay (int time_ms) {
                                    513 ;	-----------------------------------------
                                    514 ;	 function delay
                                    515 ;	-----------------------------------------
      00018E                        516 _delay:
      00018E 52 0A            [ 2]  517 	sub	sp, #10
                                    518 ;	se8r01-send-current.c: 131: for (x = 0; x < 1036*time_ms; ++x)
      000190 5F               [ 1]  519 	clrw	x
      000191 1F 03            [ 2]  520 	ldw	(0x03, sp), x
      000193 1F 01            [ 2]  521 	ldw	(0x01, sp), x
      000195 1E 0D            [ 2]  522 	ldw	x, (0x0d, sp)
      000197 89               [ 2]  523 	pushw	x
      000198 4B 0C            [ 1]  524 	push	#0x0c
      00019A 4B 04            [ 1]  525 	push	#0x04
      00019C CDr00r00         [ 4]  526 	call	__mulint
      00019F 5B 04            [ 2]  527 	addw	sp, #4
      0001A1 1F 09            [ 2]  528 	ldw	(0x09, sp), x
      0001A3                        529 00103$:
      0001A3 16 09            [ 2]  530 	ldw	y, (0x09, sp)
      0001A5 17 07            [ 2]  531 	ldw	(0x07, sp), y
      0001A7 7B 07            [ 1]  532 	ld	a, (0x07, sp)
      0001A9 49               [ 1]  533 	rlc	a
      0001AA 4F               [ 1]  534 	clr	a
      0001AB A2 00            [ 1]  535 	sbc	a, #0x00
      0001AD 6B 06            [ 1]  536 	ld	(0x06, sp), a
      0001AF 6B 05            [ 1]  537 	ld	(0x05, sp), a
      0001B1 1E 03            [ 2]  538 	ldw	x, (0x03, sp)
      0001B3 13 07            [ 2]  539 	cpw	x, (0x07, sp)
      0001B5 7B 02            [ 1]  540 	ld	a, (0x02, sp)
      0001B7 12 06            [ 1]  541 	sbc	a, (0x06, sp)
      0001B9 7B 01            [ 1]  542 	ld	a, (0x01, sp)
      0001BB 12 05            [ 1]  543 	sbc	a, (0x05, sp)
      0001BD 2E 17            [ 1]  544 	jrsge	00105$
                                    545 ;	se8r01-send-current.c: 132: __asm__("nop");
      0001BF 9D               [ 1]  546 	nop
                                    547 ;	se8r01-send-current.c: 131: for (x = 0; x < 1036*time_ms; ++x)
      0001C0 16 03            [ 2]  548 	ldw	y, (0x03, sp)
      0001C2 72 A9 00 01      [ 2]  549 	addw	y, #0x0001
      0001C6 7B 02            [ 1]  550 	ld	a, (0x02, sp)
      0001C8 A9 00            [ 1]  551 	adc	a, #0x00
      0001CA 97               [ 1]  552 	ld	xl, a
      0001CB 7B 01            [ 1]  553 	ld	a, (0x01, sp)
      0001CD A9 00            [ 1]  554 	adc	a, #0x00
      0001CF 95               [ 1]  555 	ld	xh, a
      0001D0 17 03            [ 2]  556 	ldw	(0x03, sp), y
      0001D2 1F 01            [ 2]  557 	ldw	(0x01, sp), x
      0001D4 20 CD            [ 2]  558 	jra	00103$
      0001D6                        559 00105$:
      0001D6 5B 0A            [ 2]  560 	addw	sp, #10
      0001D8 81               [ 4]  561 	ret
                                    562 ;	se8r01-send-current.c: 137: void UARTPrintF (char *message) {
                                    563 ;	-----------------------------------------
                                    564 ;	 function UARTPrintF
                                    565 ;	-----------------------------------------
      0001D9                        566 _UARTPrintF:
                                    567 ;	se8r01-send-current.c: 138: char *ch = message;
      0001D9 16 03            [ 2]  568 	ldw	y, (0x03, sp)
                                    569 ;	se8r01-send-current.c: 139: while (*ch) {
      0001DB                        570 00104$:
      0001DB 90 F6            [ 1]  571 	ld	a, (y)
      0001DD 4D               [ 1]  572 	tnz	a
      0001DE 27 0F            [ 1]  573 	jreq	00107$
                                    574 ;	se8r01-send-current.c: 140: UART1_DR = (unsigned char) *ch;     //  Put the next character into the data transmission register.
      0001E0 AE 52 31         [ 2]  575 	ldw	x, #0x5231
      0001E3 F7               [ 1]  576 	ld	(x), a
                                    577 ;	se8r01-send-current.c: 141: while ((UART1_SR & SR_TXE) == 0);   //  Wait for transmission to complete.
      0001E4                        578 00101$:
      0001E4 AE 52 30         [ 2]  579 	ldw	x, #0x5230
      0001E7 F6               [ 1]  580 	ld	a, (x)
      0001E8 48               [ 1]  581 	sll	a
      0001E9 24 F9            [ 1]  582 	jrnc	00101$
                                    583 ;	se8r01-send-current.c: 142: ch++;                               //  Grab the next character.
      0001EB 90 5C            [ 2]  584 	incw	y
      0001ED 20 EC            [ 2]  585 	jra	00104$
      0001EF                        586 00107$:
      0001EF 81               [ 4]  587 	ret
                                    588 ;	se8r01-send-current.c: 145: void print_UCHAR_hex (unsigned char buffer) {
                                    589 ;	-----------------------------------------
                                    590 ;	 function print_UCHAR_hex
                                    591 ;	-----------------------------------------
      0001F0                        592 _print_UCHAR_hex:
      0001F0 52 0C            [ 2]  593 	sub	sp, #12
                                    594 ;	se8r01-send-current.c: 148: a = (buffer >> 4);
      0001F2 7B 0F            [ 1]  595 	ld	a, (0x0f, sp)
      0001F4 4E               [ 1]  596 	swap	a
      0001F5 A4 0F            [ 1]  597 	and	a, #0x0f
      0001F7 5F               [ 1]  598 	clrw	x
      0001F8 97               [ 1]  599 	ld	xl, a
                                    600 ;	se8r01-send-current.c: 149: if (a > 9)
      0001F9 A3 00 09         [ 2]  601 	cpw	x, #0x0009
      0001FC 2D 07            [ 1]  602 	jrsle	00102$
                                    603 ;	se8r01-send-current.c: 150: a = a + 'a' - 10;
      0001FE 1C 00 57         [ 2]  604 	addw	x, #0x0057
      000201 1F 0B            [ 2]  605 	ldw	(0x0b, sp), x
      000203 20 05            [ 2]  606 	jra	00103$
      000205                        607 00102$:
                                    608 ;	se8r01-send-current.c: 152: a += '0'; 
      000205 1C 00 30         [ 2]  609 	addw	x, #0x0030
      000208 1F 0B            [ 2]  610 	ldw	(0x0b, sp), x
      00020A                        611 00103$:
                                    612 ;	se8r01-send-current.c: 153: b = buffer & 0x0f;
      00020A 7B 0F            [ 1]  613 	ld	a, (0x0f, sp)
      00020C A4 0F            [ 1]  614 	and	a, #0x0f
      00020E 5F               [ 1]  615 	clrw	x
      00020F 97               [ 1]  616 	ld	xl, a
                                    617 ;	se8r01-send-current.c: 154: if (b > 9)
      000210 A3 00 09         [ 2]  618 	cpw	x, #0x0009
      000213 2D 07            [ 1]  619 	jrsle	00105$
                                    620 ;	se8r01-send-current.c: 155: b = b + 'a' - 10;
      000215 1C 00 57         [ 2]  621 	addw	x, #0x0057
      000218 1F 09            [ 2]  622 	ldw	(0x09, sp), x
      00021A 20 05            [ 2]  623 	jra	00106$
      00021C                        624 00105$:
                                    625 ;	se8r01-send-current.c: 157: b += '0'; 
      00021C 1C 00 30         [ 2]  626 	addw	x, #0x0030
      00021F 1F 09            [ 2]  627 	ldw	(0x09, sp), x
      000221                        628 00106$:
                                    629 ;	se8r01-send-current.c: 158: message[0] = a;
      000221 90 96            [ 1]  630 	ldw	y, sp
      000223 90 5C            [ 2]  631 	incw	y
      000225 7B 0C            [ 1]  632 	ld	a, (0x0c, sp)
      000227 90 F7            [ 1]  633 	ld	(y), a
                                    634 ;	se8r01-send-current.c: 159: message[1] = b;
      000229 93               [ 1]  635 	ldw	x, y
      00022A 5C               [ 2]  636 	incw	x
      00022B 7B 0A            [ 1]  637 	ld	a, (0x0a, sp)
      00022D F7               [ 1]  638 	ld	(x), a
                                    639 ;	se8r01-send-current.c: 160: message[2] = 0;
      00022E 93               [ 1]  640 	ldw	x, y
      00022F 5C               [ 2]  641 	incw	x
      000230 5C               [ 2]  642 	incw	x
      000231 7F               [ 1]  643 	clr	(x)
                                    644 ;	se8r01-send-current.c: 161: UARTPrintF (message);
      000232 90 89            [ 2]  645 	pushw	y
      000234 CDr01rD9         [ 4]  646 	call	_UARTPrintF
      000237 5B 02            [ 2]  647 	addw	sp, #2
      000239 5B 0C            [ 2]  648 	addw	sp, #12
      00023B 81               [ 4]  649 	ret
                                    650 ;	se8r01-send-current.c: 164: void InitializeUART() {
                                    651 ;	-----------------------------------------
                                    652 ;	 function InitializeUART
                                    653 ;	-----------------------------------------
      00023C                        654 _InitializeUART:
                                    655 ;	se8r01-send-current.c: 174: UART1_CR1 = 0;
      00023C AE 52 34         [ 2]  656 	ldw	x, #0x5234
      00023F 7F               [ 1]  657 	clr	(x)
                                    658 ;	se8r01-send-current.c: 175: UART1_CR2 = 0;
      000240 AE 52 35         [ 2]  659 	ldw	x, #0x5235
      000243 7F               [ 1]  660 	clr	(x)
                                    661 ;	se8r01-send-current.c: 176: UART1_CR4 = 0;
      000244 AE 52 37         [ 2]  662 	ldw	x, #0x5237
      000247 7F               [ 1]  663 	clr	(x)
                                    664 ;	se8r01-send-current.c: 177: UART1_CR3 = 0;
      000248 AE 52 36         [ 2]  665 	ldw	x, #0x5236
      00024B 7F               [ 1]  666 	clr	(x)
                                    667 ;	se8r01-send-current.c: 178: UART1_CR5 = 0;
      00024C AE 52 38         [ 2]  668 	ldw	x, #0x5238
      00024F 7F               [ 1]  669 	clr	(x)
                                    670 ;	se8r01-send-current.c: 179: UART1_GTR = 0;
      000250 AE 52 39         [ 2]  671 	ldw	x, #0x5239
      000253 7F               [ 1]  672 	clr	(x)
                                    673 ;	se8r01-send-current.c: 180: UART1_PSCR = 0;
      000254 AE 52 3A         [ 2]  674 	ldw	x, #0x523a
      000257 7F               [ 1]  675 	clr	(x)
                                    676 ;	se8r01-send-current.c: 184: UNSET (UART1_CR1, CR1_M);        //  8 Data bits.
      000258 AE 52 34         [ 2]  677 	ldw	x, #0x5234
      00025B F6               [ 1]  678 	ld	a, (x)
      00025C A4 EF            [ 1]  679 	and	a, #0xef
      00025E F7               [ 1]  680 	ld	(x), a
                                    681 ;	se8r01-send-current.c: 185: UNSET (UART1_CR1, CR1_PCEN);     //  Disable parity.
      00025F AE 52 34         [ 2]  682 	ldw	x, #0x5234
      000262 F6               [ 1]  683 	ld	a, (x)
      000263 A4 FB            [ 1]  684 	and	a, #0xfb
      000265 F7               [ 1]  685 	ld	(x), a
                                    686 ;	se8r01-send-current.c: 186: UNSET (UART1_CR3, CR3_STOPH);    //  1 stop bit.
      000266 AE 52 36         [ 2]  687 	ldw	x, #0x5236
      000269 F6               [ 1]  688 	ld	a, (x)
      00026A A4 DF            [ 1]  689 	and	a, #0xdf
      00026C F7               [ 1]  690 	ld	(x), a
                                    691 ;	se8r01-send-current.c: 187: UNSET (UART1_CR3, CR3_STOPL);    //  1 stop bit.
      00026D AE 52 36         [ 2]  692 	ldw	x, #0x5236
      000270 F6               [ 1]  693 	ld	a, (x)
      000271 A4 EF            [ 1]  694 	and	a, #0xef
      000273 F7               [ 1]  695 	ld	(x), a
                                    696 ;	se8r01-send-current.c: 188: UART1_BRR2 = 0x0a;      //  Set the baud rate registers to 115200 baud
      000274 AE 52 33         [ 2]  697 	ldw	x, #0x5233
      000277 A6 0A            [ 1]  698 	ld	a, #0x0a
      000279 F7               [ 1]  699 	ld	(x), a
                                    700 ;	se8r01-send-current.c: 189: UART1_BRR1 = 0x08;      //  based upon a 16 MHz system clock.
      00027A AE 52 32         [ 2]  701 	ldw	x, #0x5232
      00027D A6 08            [ 1]  702 	ld	a, #0x08
      00027F F7               [ 1]  703 	ld	(x), a
                                    704 ;	se8r01-send-current.c: 193: UNSET (UART1_CR2, CR2_TEN);      //  Disable transmit.
      000280 AE 52 35         [ 2]  705 	ldw	x, #0x5235
      000283 F6               [ 1]  706 	ld	a, (x)
      000284 A4 F7            [ 1]  707 	and	a, #0xf7
      000286 F7               [ 1]  708 	ld	(x), a
                                    709 ;	se8r01-send-current.c: 194: UNSET (UART1_CR2, CR2_REN);      //  Disable receive.
      000287 AE 52 35         [ 2]  710 	ldw	x, #0x5235
      00028A F6               [ 1]  711 	ld	a, (x)
      00028B A4 FB            [ 1]  712 	and	a, #0xfb
      00028D F7               [ 1]  713 	ld	(x), a
                                    714 ;	se8r01-send-current.c: 198: SET (UART1_CR3, CR3_CPOL);
      00028E AE 52 36         [ 2]  715 	ldw	x, #0x5236
      000291 F6               [ 1]  716 	ld	a, (x)
      000292 AA 04            [ 1]  717 	or	a, #0x04
      000294 F7               [ 1]  718 	ld	(x), a
                                    719 ;	se8r01-send-current.c: 199: SET (UART1_CR3, CR3_CPHA);
      000295 AE 52 36         [ 2]  720 	ldw	x, #0x5236
      000298 F6               [ 1]  721 	ld	a, (x)
      000299 AA 02            [ 1]  722 	or	a, #0x02
      00029B F7               [ 1]  723 	ld	(x), a
                                    724 ;	se8r01-send-current.c: 200: SET (UART1_CR3, CR3_LBCL);
      00029C 72 10 52 36      [ 1]  725 	bset	0x5236, #0
                                    726 ;	se8r01-send-current.c: 204: SET (UART1_CR2, CR2_TEN);
      0002A0 AE 52 35         [ 2]  727 	ldw	x, #0x5235
      0002A3 F6               [ 1]  728 	ld	a, (x)
      0002A4 AA 08            [ 1]  729 	or	a, #0x08
      0002A6 F7               [ 1]  730 	ld	(x), a
                                    731 ;	se8r01-send-current.c: 205: SET (UART1_CR2, CR2_REN);
      0002A7 AE 52 35         [ 2]  732 	ldw	x, #0x5235
      0002AA F6               [ 1]  733 	ld	a, (x)
      0002AB AA 04            [ 1]  734 	or	a, #0x04
      0002AD F7               [ 1]  735 	ld	(x), a
                                    736 ;	se8r01-send-current.c: 206: UART1_CR3 = CR3_CLKEN;
      0002AE AE 52 36         [ 2]  737 	ldw	x, #0x5236
      0002B1 A6 08            [ 1]  738 	ld	a, #0x08
      0002B3 F7               [ 1]  739 	ld	(x), a
      0002B4 81               [ 4]  740 	ret
                                    741 ;	se8r01-send-current.c: 279: void init_io(void)
                                    742 ;	-----------------------------------------
                                    743 ;	 function init_io
                                    744 ;	-----------------------------------------
      0002B5                        745 _init_io:
                                    746 ;	se8r01-send-current.c: 281: PD_DDR &= ~(1 << 3); // input mode
      0002B5 AE 50 11         [ 2]  747 	ldw	x, #0x5011
      0002B8 F6               [ 1]  748 	ld	a, (x)
      0002B9 A4 F7            [ 1]  749 	and	a, #0xf7
      0002BB F7               [ 1]  750 	ld	(x), a
                                    751 ;	se8r01-send-current.c: 282: PD_CR1 |= (1 << 3); // input with pull up 
      0002BC AE 50 12         [ 2]  752 	ldw	x, #0x5012
      0002BF F6               [ 1]  753 	ld	a, (x)
      0002C0 AA 08            [ 1]  754 	or	a, #0x08
      0002C2 F7               [ 1]  755 	ld	(x), a
                                    756 ;	se8r01-send-current.c: 283: PD_CR2 |= (1 << 3); // interrupt enabled 
      0002C3 AE 50 13         [ 2]  757 	ldw	x, #0x5013
      0002C6 F6               [ 1]  758 	ld	a, (x)
      0002C7 AA 08            [ 1]  759 	or	a, #0x08
      0002C9 F7               [ 1]  760 	ld	(x), a
                                    761 ;	se8r01-send-current.c: 284: PD_ODR &= ~(1 << 3);
      0002CA AE 50 0F         [ 2]  762 	ldw	x, #0x500f
      0002CD F6               [ 1]  763 	ld	a, (x)
      0002CE A4 F7            [ 1]  764 	and	a, #0xf7
      0002D0 F7               [ 1]  765 	ld	(x), a
                                    766 ;	se8r01-send-current.c: 287: PC_ODR &= ~(1 << CE);
      0002D1 AE 50 0A         [ 2]  767 	ldw	x, #0x500a
      0002D4 F6               [ 1]  768 	ld	a, (x)
      0002D5 A4 EF            [ 1]  769 	and	a, #0xef
      0002D7 F7               [ 1]  770 	ld	(x), a
                                    771 ;	se8r01-send-current.c: 289: PC_ODR |= (1 << CSN);
      0002D8 AE 50 0A         [ 2]  772 	ldw	x, #0x500a
      0002DB F6               [ 1]  773 	ld	a, (x)
      0002DC AA 08            [ 1]  774 	or	a, #0x08
      0002DE F7               [ 1]  775 	ld	(x), a
      0002DF 81               [ 4]  776 	ret
                                    777 ;	se8r01-send-current.c: 295: void rf_switch_bank(unsigned char bankindex)
                                    778 ;	-----------------------------------------
                                    779 ;	 function rf_switch_bank
                                    780 ;	-----------------------------------------
      0002E0                        781 _rf_switch_bank:
      0002E0 88               [ 1]  782 	push	a
                                    783 ;	se8r01-send-current.c: 298: temp1 = bankindex;
      0002E1 7B 04            [ 1]  784 	ld	a, (0x04, sp)
      0002E3 6B 01            [ 1]  785 	ld	(0x01, sp), a
                                    786 ;	se8r01-send-current.c: 300: temp0 = write_spi(iRF_BANK0_STATUS);
      0002E5 4B 07            [ 1]  787 	push	#0x07
      0002E7 CDr00r08         [ 4]  788 	call	_write_spi
      0002EA 5B 01            [ 2]  789 	addw	sp, #1
                                    790 ;	se8r01-send-current.c: 302: if((temp0&0x80)!=temp1)
      0002EC A4 80            [ 1]  791 	and	a, #0x80
      0002EE 11 01            [ 1]  792 	cp	a, (0x01, sp)
      0002F0 27 09            [ 1]  793 	jreq	00103$
                                    794 ;	se8r01-send-current.c: 304: write_spi_reg(iRF_CMD_ACTIVATE,0x53);
      0002F2 4B 53            [ 1]  795 	push	#0x53
      0002F4 4B 50            [ 1]  796 	push	#0x50
      0002F6 CDr00r2E         [ 4]  797 	call	_write_spi_reg
      0002F9 5B 02            [ 2]  798 	addw	sp, #2
      0002FB                        799 00103$:
      0002FB 84               [ 1]  800 	pop	a
      0002FC 81               [ 4]  801 	ret
                                    802 ;	se8r01-send-current.c: 311: void SE8R01_Calibration()
                                    803 ;	-----------------------------------------
                                    804 ;	 function SE8R01_Calibration
                                    805 ;	-----------------------------------------
      0002FD                        806 _SE8R01_Calibration:
      0002FD 52 0D            [ 2]  807 	sub	sp, #13
                                    808 ;	se8r01-send-current.c: 314: rf_switch_bank(iBANK0);
      0002FF 4B 00            [ 1]  809 	push	#0x00
      000301 CDr02rE0         [ 4]  810 	call	_rf_switch_bank
      000304 84               [ 1]  811 	pop	a
                                    812 ;	se8r01-send-current.c: 315: temp[0]=0x03;
      000305 96               [ 1]  813 	ldw	x, sp
      000306 5C               [ 2]  814 	incw	x
      000307 1F 06            [ 2]  815 	ldw	(0x06, sp), x
      000309 1E 06            [ 2]  816 	ldw	x, (0x06, sp)
      00030B A6 03            [ 1]  817 	ld	a, #0x03
      00030D F7               [ 1]  818 	ld	(x), a
                                    819 ;	se8r01-send-current.c: 316: write_spi_buf(iRF_CMD_WRITE_REG|iRF_BANK0_CONFIG,temp, 1);
      00030E 1E 06            [ 2]  820 	ldw	x, (0x06, sp)
      000310 4B 01            [ 1]  821 	push	#0x01
      000312 89               [ 2]  822 	pushw	x
      000313 4B 20            [ 1]  823 	push	#0x20
      000315 CDr00rA8         [ 4]  824 	call	_write_spi_buf
      000318 5B 04            [ 2]  825 	addw	sp, #4
                                    826 ;	se8r01-send-current.c: 318: temp[0]=0x32;
      00031A 1E 06            [ 2]  827 	ldw	x, (0x06, sp)
      00031C A6 32            [ 1]  828 	ld	a, #0x32
      00031E F7               [ 1]  829 	ld	(x), a
                                    830 ;	se8r01-send-current.c: 320: write_spi_buf(iRF_CMD_WRITE_REG|iRF_BANK0_RF_CH, temp,1);
      00031F 1E 06            [ 2]  831 	ldw	x, (0x06, sp)
      000321 4B 01            [ 1]  832 	push	#0x01
      000323 89               [ 2]  833 	pushw	x
      000324 4B 25            [ 1]  834 	push	#0x25
      000326 CDr00rA8         [ 4]  835 	call	_write_spi_buf
      000329 5B 04            [ 2]  836 	addw	sp, #4
                                    837 ;	se8r01-send-current.c: 324: if (SE8R01_DR_2M==1)
      00032B CEu00u00         [ 2]  838 	ldw	x, _SE8R01_DR_2M+0
      00032E A3 00 01         [ 2]  839 	cpw	x, #0x0001
      000331 26 07            [ 1]  840 	jrne	00105$
                                    841 ;	se8r01-send-current.c: 325: {temp[0]=0x48;}
      000333 1E 06            [ 2]  842 	ldw	x, (0x06, sp)
      000335 A6 48            [ 1]  843 	ld	a, #0x48
      000337 F7               [ 1]  844 	ld	(x), a
      000338 20 14            [ 2]  845 	jra	00106$
      00033A                        846 00105$:
                                    847 ;	se8r01-send-current.c: 326: else if (SE8R01_DR_1M==1)
      00033A CEu00u02         [ 2]  848 	ldw	x, _SE8R01_DR_1M+0
      00033D A3 00 01         [ 2]  849 	cpw	x, #0x0001
      000340 26 07            [ 1]  850 	jrne	00102$
                                    851 ;	se8r01-send-current.c: 327: {temp[0]=0x40;}
      000342 1E 06            [ 2]  852 	ldw	x, (0x06, sp)
      000344 A6 40            [ 1]  853 	ld	a, #0x40
      000346 F7               [ 1]  854 	ld	(x), a
      000347 20 05            [ 2]  855 	jra	00106$
      000349                        856 00102$:
                                    857 ;	se8r01-send-current.c: 329: {temp[0]=0x68;}   
      000349 1E 06            [ 2]  858 	ldw	x, (0x06, sp)
      00034B A6 68            [ 1]  859 	ld	a, #0x68
      00034D F7               [ 1]  860 	ld	(x), a
      00034E                        861 00106$:
                                    862 ;	se8r01-send-current.c: 331: write_spi_buf(iRF_CMD_WRITE_REG|iRF_BANK0_RF_SETUP,temp,1);
      00034E 1E 06            [ 2]  863 	ldw	x, (0x06, sp)
      000350 4B 01            [ 1]  864 	push	#0x01
      000352 89               [ 2]  865 	pushw	x
      000353 4B 26            [ 1]  866 	push	#0x26
      000355 CDr00rA8         [ 4]  867 	call	_write_spi_buf
      000358 5B 04            [ 2]  868 	addw	sp, #4
                                    869 ;	se8r01-send-current.c: 332: temp[0]=0x77;
      00035A 1E 06            [ 2]  870 	ldw	x, (0x06, sp)
      00035C A6 77            [ 1]  871 	ld	a, #0x77
      00035E F7               [ 1]  872 	ld	(x), a
                                    873 ;	se8r01-send-current.c: 333: write_spi_buf(iRF_CMD_WRITE_REG|iRF_BANK0_PRE_GURD, temp,1);
      00035F 1E 06            [ 2]  874 	ldw	x, (0x06, sp)
      000361 4B 01            [ 1]  875 	push	#0x01
      000363 89               [ 2]  876 	pushw	x
      000364 4B 3F            [ 1]  877 	push	#0x3f
      000366 CDr00rA8         [ 4]  878 	call	_write_spi_buf
      000369 5B 04            [ 2]  879 	addw	sp, #4
                                    880 ;	se8r01-send-current.c: 335: rf_switch_bank(iBANK1);
      00036B 4B 80            [ 1]  881 	push	#0x80
      00036D CDr02rE0         [ 4]  882 	call	_rf_switch_bank
      000370 84               [ 1]  883 	pop	a
                                    884 ;	se8r01-send-current.c: 336: temp[0]=0x40;
      000371 1E 06            [ 2]  885 	ldw	x, (0x06, sp)
      000373 A6 40            [ 1]  886 	ld	a, #0x40
      000375 F7               [ 1]  887 	ld	(x), a
                                    888 ;	se8r01-send-current.c: 337: temp[1]=0x00;
      000376 1E 06            [ 2]  889 	ldw	x, (0x06, sp)
      000378 5C               [ 2]  890 	incw	x
      000379 1F 0C            [ 2]  891 	ldw	(0x0c, sp), x
      00037B 1E 0C            [ 2]  892 	ldw	x, (0x0c, sp)
      00037D 7F               [ 1]  893 	clr	(x)
                                    894 ;	se8r01-send-current.c: 338: temp[2]=0x10;
      00037E 1E 06            [ 2]  895 	ldw	x, (0x06, sp)
      000380 5C               [ 2]  896 	incw	x
      000381 5C               [ 2]  897 	incw	x
      000382 1F 0A            [ 2]  898 	ldw	(0x0a, sp), x
      000384 1E 0A            [ 2]  899 	ldw	x, (0x0a, sp)
      000386 A6 10            [ 1]  900 	ld	a, #0x10
      000388 F7               [ 1]  901 	ld	(x), a
                                    902 ;	se8r01-send-current.c: 340: {temp[3]=0xE6;}
      000389 1E 06            [ 2]  903 	ldw	x, (0x06, sp)
      00038B 1C 00 03         [ 2]  904 	addw	x, #0x0003
      00038E 1F 08            [ 2]  905 	ldw	(0x08, sp), x
                                    906 ;	se8r01-send-current.c: 339: if (SE8R01_DR_2M==1)
      000390 CEu00u00         [ 2]  907 	ldw	x, _SE8R01_DR_2M+0
      000393 A3 00 01         [ 2]  908 	cpw	x, #0x0001
      000396 26 07            [ 1]  909 	jrne	00108$
                                    910 ;	se8r01-send-current.c: 340: {temp[3]=0xE6;}
      000398 1E 08            [ 2]  911 	ldw	x, (0x08, sp)
      00039A A6 E6            [ 1]  912 	ld	a, #0xe6
      00039C F7               [ 1]  913 	ld	(x), a
      00039D 20 05            [ 2]  914 	jra	00109$
      00039F                        915 00108$:
                                    916 ;	se8r01-send-current.c: 342: {temp[3]=0xE4;}
      00039F 1E 08            [ 2]  917 	ldw	x, (0x08, sp)
      0003A1 A6 E4            [ 1]  918 	ld	a, #0xe4
      0003A3 F7               [ 1]  919 	ld	(x), a
      0003A4                        920 00109$:
                                    921 ;	se8r01-send-current.c: 344: write_spi_buf(iRF_CMD_WRITE_REG|iRF_BANK1_PLL_CTL0, temp, 4);
      0003A4 1E 06            [ 2]  922 	ldw	x, (0x06, sp)
      0003A6 4B 04            [ 1]  923 	push	#0x04
      0003A8 89               [ 2]  924 	pushw	x
      0003A9 4B 21            [ 1]  925 	push	#0x21
      0003AB CDr00rA8         [ 4]  926 	call	_write_spi_buf
      0003AE 5B 04            [ 2]  927 	addw	sp, #4
                                    928 ;	se8r01-send-current.c: 346: temp[0]=0x20;
      0003B0 1E 06            [ 2]  929 	ldw	x, (0x06, sp)
      0003B2 A6 20            [ 1]  930 	ld	a, #0x20
      0003B4 F7               [ 1]  931 	ld	(x), a
                                    932 ;	se8r01-send-current.c: 347: temp[1]=0x08;
      0003B5 1E 0C            [ 2]  933 	ldw	x, (0x0c, sp)
      0003B7 A6 08            [ 1]  934 	ld	a, #0x08
      0003B9 F7               [ 1]  935 	ld	(x), a
                                    936 ;	se8r01-send-current.c: 348: temp[2]=0x50;
      0003BA 1E 0A            [ 2]  937 	ldw	x, (0x0a, sp)
      0003BC A6 50            [ 1]  938 	ld	a, #0x50
      0003BE F7               [ 1]  939 	ld	(x), a
                                    940 ;	se8r01-send-current.c: 349: temp[3]=0x40;
      0003BF 1E 08            [ 2]  941 	ldw	x, (0x08, sp)
      0003C1 A6 40            [ 1]  942 	ld	a, #0x40
      0003C3 F7               [ 1]  943 	ld	(x), a
                                    944 ;	se8r01-send-current.c: 350: temp[4]=0x50;
      0003C4 1E 06            [ 2]  945 	ldw	x, (0x06, sp)
      0003C6 A6 50            [ 1]  946 	ld	a, #0x50
      0003C8 E7 04            [ 1]  947 	ld	(0x0004, x), a
                                    948 ;	se8r01-send-current.c: 351: write_spi_buf(iRF_CMD_WRITE_REG|iRF_BANK1_CAL_CTL, temp, 5);
      0003CA 1E 06            [ 2]  949 	ldw	x, (0x06, sp)
      0003CC 4B 05            [ 1]  950 	push	#0x05
      0003CE 89               [ 2]  951 	pushw	x
      0003CF 4B 23            [ 1]  952 	push	#0x23
      0003D1 CDr00rA8         [ 4]  953 	call	_write_spi_buf
      0003D4 5B 04            [ 2]  954 	addw	sp, #4
                                    955 ;	se8r01-send-current.c: 353: temp[0]=0x00;
      0003D6 1E 06            [ 2]  956 	ldw	x, (0x06, sp)
      0003D8 7F               [ 1]  957 	clr	(x)
                                    958 ;	se8r01-send-current.c: 354: temp[1]=0x00;
      0003D9 1E 0C            [ 2]  959 	ldw	x, (0x0c, sp)
      0003DB 7F               [ 1]  960 	clr	(x)
                                    961 ;	se8r01-send-current.c: 355: if (SE8R01_DR_2M==1)
      0003DC CEu00u00         [ 2]  962 	ldw	x, _SE8R01_DR_2M+0
      0003DF A3 00 01         [ 2]  963 	cpw	x, #0x0001
      0003E2 26 07            [ 1]  964 	jrne	00111$
                                    965 ;	se8r01-send-current.c: 356: { temp[2]=0x1E;}
      0003E4 1E 0A            [ 2]  966 	ldw	x, (0x0a, sp)
      0003E6 A6 1E            [ 1]  967 	ld	a, #0x1e
      0003E8 F7               [ 1]  968 	ld	(x), a
      0003E9 20 05            [ 2]  969 	jra	00112$
      0003EB                        970 00111$:
                                    971 ;	se8r01-send-current.c: 358: { temp[2]=0x1F;}
      0003EB 1E 0A            [ 2]  972 	ldw	x, (0x0a, sp)
      0003ED A6 1F            [ 1]  973 	ld	a, #0x1f
      0003EF F7               [ 1]  974 	ld	(x), a
      0003F0                        975 00112$:
                                    976 ;	se8r01-send-current.c: 360: write_spi_buf(iRF_CMD_WRITE_REG|iRF_BANK1_IF_FREQ, temp, 3);
      0003F0 1E 06            [ 2]  977 	ldw	x, (0x06, sp)
      0003F2 4B 03            [ 1]  978 	push	#0x03
      0003F4 89               [ 2]  979 	pushw	x
      0003F5 4B 2A            [ 1]  980 	push	#0x2a
      0003F7 CDr00rA8         [ 4]  981 	call	_write_spi_buf
      0003FA 5B 04            [ 2]  982 	addw	sp, #4
                                    983 ;	se8r01-send-current.c: 362: if (SE8R01_DR_2M==1)
      0003FC CEu00u00         [ 2]  984 	ldw	x, _SE8R01_DR_2M+0
      0003FF A3 00 01         [ 2]  985 	cpw	x, #0x0001
      000402 26 07            [ 1]  986 	jrne	00114$
                                    987 ;	se8r01-send-current.c: 363: { temp[0]=0x29;}
      000404 1E 06            [ 2]  988 	ldw	x, (0x06, sp)
      000406 A6 29            [ 1]  989 	ld	a, #0x29
      000408 F7               [ 1]  990 	ld	(x), a
      000409 20 05            [ 2]  991 	jra	00115$
      00040B                        992 00114$:
                                    993 ;	se8r01-send-current.c: 365: { temp[0]=0x14;}
      00040B 1E 06            [ 2]  994 	ldw	x, (0x06, sp)
      00040D A6 14            [ 1]  995 	ld	a, #0x14
      00040F F7               [ 1]  996 	ld	(x), a
      000410                        997 00115$:
                                    998 ;	se8r01-send-current.c: 367: write_spi_buf(iRF_CMD_WRITE_REG|iRF_BANK1_FDEV, temp, 1);
      000410 1E 06            [ 2]  999 	ldw	x, (0x06, sp)
      000412 4B 01            [ 1] 1000 	push	#0x01
      000414 89               [ 2] 1001 	pushw	x
      000415 4B 2C            [ 1] 1002 	push	#0x2c
      000417 CDr00rA8         [ 4] 1003 	call	_write_spi_buf
      00041A 5B 04            [ 2] 1004 	addw	sp, #4
                                   1005 ;	se8r01-send-current.c: 369: temp[0]=0x00;
      00041C 1E 06            [ 2] 1006 	ldw	x, (0x06, sp)
      00041E 7F               [ 1] 1007 	clr	(x)
                                   1008 ;	se8r01-send-current.c: 370: write_spi_buf(iRF_CMD_WRITE_REG|iRF_BANK1_DAC_CAL_LOW,temp,1);
      00041F 1E 06            [ 2] 1009 	ldw	x, (0x06, sp)
      000421 4B 01            [ 1] 1010 	push	#0x01
      000423 89               [ 2] 1011 	pushw	x
      000424 4B 37            [ 1] 1012 	push	#0x37
      000426 CDr00rA8         [ 4] 1013 	call	_write_spi_buf
      000429 5B 04            [ 2] 1014 	addw	sp, #4
                                   1015 ;	se8r01-send-current.c: 372: temp[0]=0x7F;
      00042B 1E 06            [ 2] 1016 	ldw	x, (0x06, sp)
      00042D A6 7F            [ 1] 1017 	ld	a, #0x7f
      00042F F7               [ 1] 1018 	ld	(x), a
                                   1019 ;	se8r01-send-current.c: 373: write_spi_buf(iRF_CMD_WRITE_REG|iRF_BANK1_DAC_CAL_HI,temp,1);
      000430 1E 06            [ 2] 1020 	ldw	x, (0x06, sp)
      000432 4B 01            [ 1] 1021 	push	#0x01
      000434 89               [ 2] 1022 	pushw	x
      000435 4B 38            [ 1] 1023 	push	#0x38
      000437 CDr00rA8         [ 4] 1024 	call	_write_spi_buf
      00043A 5B 04            [ 2] 1025 	addw	sp, #4
                                   1026 ;	se8r01-send-current.c: 375: temp[0]=0x02;
      00043C 1E 06            [ 2] 1027 	ldw	x, (0x06, sp)
      00043E A6 02            [ 1] 1028 	ld	a, #0x02
      000440 F7               [ 1] 1029 	ld	(x), a
                                   1030 ;	se8r01-send-current.c: 376: temp[1]=0xC1;
      000441 1E 0C            [ 2] 1031 	ldw	x, (0x0c, sp)
      000443 A6 C1            [ 1] 1032 	ld	a, #0xc1
      000445 F7               [ 1] 1033 	ld	(x), a
                                   1034 ;	se8r01-send-current.c: 377: temp[2]=0xEB;            
      000446 1E 0A            [ 2] 1035 	ldw	x, (0x0a, sp)
      000448 A6 EB            [ 1] 1036 	ld	a, #0xeb
      00044A F7               [ 1] 1037 	ld	(x), a
                                   1038 ;	se8r01-send-current.c: 378: temp[3]=0x1C;
      00044B 1E 08            [ 2] 1039 	ldw	x, (0x08, sp)
      00044D A6 1C            [ 1] 1040 	ld	a, #0x1c
      00044F F7               [ 1] 1041 	ld	(x), a
                                   1042 ;	se8r01-send-current.c: 379: write_spi_buf(iRF_CMD_WRITE_REG|iRF_BANK1_AGC_GAIN, temp,4);
      000450 1E 06            [ 2] 1043 	ldw	x, (0x06, sp)
      000452 4B 04            [ 1] 1044 	push	#0x04
      000454 89               [ 2] 1045 	pushw	x
      000455 4B 3D            [ 1] 1046 	push	#0x3d
      000457 CDr00rA8         [ 4] 1047 	call	_write_spi_buf
      00045A 5B 04            [ 2] 1048 	addw	sp, #4
                                   1049 ;	se8r01-send-current.c: 381: temp[0]=0x97;
      00045C 1E 06            [ 2] 1050 	ldw	x, (0x06, sp)
      00045E A6 97            [ 1] 1051 	ld	a, #0x97
      000460 F7               [ 1] 1052 	ld	(x), a
                                   1053 ;	se8r01-send-current.c: 382: temp[1]=0x64;
      000461 1E 0C            [ 2] 1054 	ldw	x, (0x0c, sp)
      000463 A6 64            [ 1] 1055 	ld	a, #0x64
      000465 F7               [ 1] 1056 	ld	(x), a
                                   1057 ;	se8r01-send-current.c: 383: temp[2]=0x00;
      000466 1E 0A            [ 2] 1058 	ldw	x, (0x0a, sp)
      000468 7F               [ 1] 1059 	clr	(x)
                                   1060 ;	se8r01-send-current.c: 384: temp[3]=0x81;
      000469 1E 08            [ 2] 1061 	ldw	x, (0x08, sp)
      00046B A6 81            [ 1] 1062 	ld	a, #0x81
      00046D F7               [ 1] 1063 	ld	(x), a
                                   1064 ;	se8r01-send-current.c: 385: write_spi_buf(iRF_CMD_WRITE_REG|iRF_BANK1_RF_IVGEN, temp, 4);
      00046E 1E 06            [ 2] 1065 	ldw	x, (0x06, sp)
      000470 4B 04            [ 1] 1066 	push	#0x04
      000472 89               [ 2] 1067 	pushw	x
      000473 4B 3E            [ 1] 1068 	push	#0x3e
      000475 CDr00rA8         [ 4] 1069 	call	_write_spi_buf
      000478 5B 04            [ 2] 1070 	addw	sp, #4
                                   1071 ;	se8r01-send-current.c: 386: rf_switch_bank(iBANK0);
      00047A 4B 00            [ 1] 1072 	push	#0x00
      00047C CDr02rE0         [ 4] 1073 	call	_rf_switch_bank
      00047F 84               [ 1] 1074 	pop	a
                                   1075 ;	se8r01-send-current.c: 391: delayTenMicro();
      000480 CDr00r00         [ 4] 1076 	call	_delayTenMicro
                                   1077 ;	se8r01-send-current.c: 392: PC_ODR |= (1 << CE);
      000483 AE 50 0A         [ 2] 1078 	ldw	x, #0x500a
      000486 F6               [ 1] 1079 	ld	a, (x)
      000487 AA 10            [ 1] 1080 	or	a, #0x10
      000489 F7               [ 1] 1081 	ld	(x), a
                                   1082 ;	se8r01-send-current.c: 393: delayTenMicro();
      00048A CDr00r00         [ 4] 1083 	call	_delayTenMicro
                                   1084 ;	se8r01-send-current.c: 394: delayTenMicro();
      00048D CDr00r00         [ 4] 1085 	call	_delayTenMicro
                                   1086 ;	se8r01-send-current.c: 395: delayTenMicro();
      000490 CDr00r00         [ 4] 1087 	call	_delayTenMicro
                                   1088 ;	se8r01-send-current.c: 396: PC_ODR &= ~(1 << CE);
      000493 AE 50 0A         [ 2] 1089 	ldw	x, #0x500a
      000496 F6               [ 1] 1090 	ld	a, (x)
      000497 A4 EF            [ 1] 1091 	and	a, #0xef
      000499 F7               [ 1] 1092 	ld	(x), a
                                   1093 ;	se8r01-send-current.c: 397: delay(50);                            // delay 50ms waitting for calibaration.
      00049A 4B 32            [ 1] 1094 	push	#0x32
      00049C 4B 00            [ 1] 1095 	push	#0x00
      00049E CDr01r8E         [ 4] 1096 	call	_delay
      0004A1 5B 02            [ 2] 1097 	addw	sp, #2
                                   1098 ;	se8r01-send-current.c: 402: delayTenMicro();
      0004A3 CDr00r00         [ 4] 1099 	call	_delayTenMicro
                                   1100 ;	se8r01-send-current.c: 403: PC_ODR |= (1 << CE);
      0004A6 AE 50 0A         [ 2] 1101 	ldw	x, #0x500a
      0004A9 F6               [ 1] 1102 	ld	a, (x)
      0004AA AA 10            [ 1] 1103 	or	a, #0x10
      0004AC F7               [ 1] 1104 	ld	(x), a
                                   1105 ;	se8r01-send-current.c: 404: delayTenMicro();
      0004AD CDr00r00         [ 4] 1106 	call	_delayTenMicro
                                   1107 ;	se8r01-send-current.c: 405: delayTenMicro();
      0004B0 CDr00r00         [ 4] 1108 	call	_delayTenMicro
                                   1109 ;	se8r01-send-current.c: 406: delayTenMicro();
      0004B3 CDr00r00         [ 4] 1110 	call	_delayTenMicro
                                   1111 ;	se8r01-send-current.c: 407: PC_ODR &= ~(1 << CE);
      0004B6 AE 50 0A         [ 2] 1112 	ldw	x, #0x500a
      0004B9 F6               [ 1] 1113 	ld	a, (x)
      0004BA A4 EF            [ 1] 1114 	and	a, #0xef
      0004BC F7               [ 1] 1115 	ld	(x), a
                                   1116 ;	se8r01-send-current.c: 408: delay(50);                            // delay 50ms waitting for calibaration.
      0004BD 4B 32            [ 1] 1117 	push	#0x32
      0004BF 4B 00            [ 1] 1118 	push	#0x00
      0004C1 CDr01r8E         [ 4] 1119 	call	_delay
      0004C4 5B 02            [ 2] 1120 	addw	sp, #2
      0004C6 5B 0D            [ 2] 1121 	addw	sp, #13
      0004C8 81               [ 4] 1122 	ret
                                   1123 ;	se8r01-send-current.c: 412: void SE8R01_Analog_Init()           //SE8R01 初始化
                                   1124 ;	-----------------------------------------
                                   1125 ;	 function SE8R01_Analog_Init
                                   1126 ;	-----------------------------------------
      0004C9                       1127 _SE8R01_Analog_Init:
      0004C9 52 15            [ 2] 1128 	sub	sp, #21
                                   1129 ;	se8r01-send-current.c: 417: gtemp[0]=0x28;
      0004CB AEr00r00         [ 2] 1130 	ldw	x, #_gtemp+0
      0004CE 1F 0E            [ 2] 1131 	ldw	(0x0e, sp), x
      0004D0 1E 0E            [ 2] 1132 	ldw	x, (0x0e, sp)
      0004D2 A6 28            [ 1] 1133 	ld	a, #0x28
      0004D4 F7               [ 1] 1134 	ld	(x), a
                                   1135 ;	se8r01-send-current.c: 418: gtemp[1]=0x32;
      0004D5 1E 0E            [ 2] 1136 	ldw	x, (0x0e, sp)
      0004D7 5C               [ 2] 1137 	incw	x
      0004D8 1F 0C            [ 2] 1138 	ldw	(0x0c, sp), x
      0004DA 1E 0C            [ 2] 1139 	ldw	x, (0x0c, sp)
      0004DC A6 32            [ 1] 1140 	ld	a, #0x32
      0004DE F7               [ 1] 1141 	ld	(x), a
                                   1142 ;	se8r01-send-current.c: 419: gtemp[2]=0x80;
      0004DF 1E 0E            [ 2] 1143 	ldw	x, (0x0e, sp)
      0004E1 5C               [ 2] 1144 	incw	x
      0004E2 5C               [ 2] 1145 	incw	x
      0004E3 1F 0A            [ 2] 1146 	ldw	(0x0a, sp), x
      0004E5 1E 0A            [ 2] 1147 	ldw	x, (0x0a, sp)
      0004E7 A6 80            [ 1] 1148 	ld	a, #0x80
      0004E9 F7               [ 1] 1149 	ld	(x), a
                                   1150 ;	se8r01-send-current.c: 420: gtemp[3]=0x90;
      0004EA 1E 0E            [ 2] 1151 	ldw	x, (0x0e, sp)
      0004EC 1C 00 03         [ 2] 1152 	addw	x, #0x0003
      0004EF 1F 08            [ 2] 1153 	ldw	(0x08, sp), x
      0004F1 1E 08            [ 2] 1154 	ldw	x, (0x08, sp)
      0004F3 A6 90            [ 1] 1155 	ld	a, #0x90
      0004F5 F7               [ 1] 1156 	ld	(x), a
                                   1157 ;	se8r01-send-current.c: 421: gtemp[4]=0x00;
      0004F6 1E 0E            [ 2] 1158 	ldw	x, (0x0e, sp)
      0004F8 1C 00 04         [ 2] 1159 	addw	x, #0x0004
      0004FB 7F               [ 1] 1160 	clr	(x)
                                   1161 ;	se8r01-send-current.c: 422: write_spi_buf(iRF_CMD_WRITE_REG|iRF_BANK0_SETUP_VALUE, gtemp, 5);
      0004FC 1E 0E            [ 2] 1162 	ldw	x, (0x0e, sp)
      0004FE 4B 05            [ 1] 1163 	push	#0x05
      000500 89               [ 2] 1164 	pushw	x
      000501 4B 3E            [ 1] 1165 	push	#0x3e
      000503 CDr00rA8         [ 4] 1166 	call	_write_spi_buf
      000506 5B 04            [ 2] 1167 	addw	sp, #4
                                   1168 ;	se8r01-send-current.c: 423: delay(2);
      000508 4B 02            [ 1] 1169 	push	#0x02
      00050A 4B 00            [ 1] 1170 	push	#0x00
      00050C CDr01r8E         [ 4] 1171 	call	_delay
      00050F 5B 02            [ 2] 1172 	addw	sp, #2
                                   1173 ;	se8r01-send-current.c: 426: rf_switch_bank(iBANK1);
      000511 4B 80            [ 1] 1174 	push	#0x80
      000513 CDr02rE0         [ 4] 1175 	call	_rf_switch_bank
      000516 84               [ 1] 1176 	pop	a
                                   1177 ;	se8r01-send-current.c: 428: temp[0]=0x40;
      000517 96               [ 1] 1178 	ldw	x, sp
      000518 5C               [ 2] 1179 	incw	x
      000519 1F 14            [ 2] 1180 	ldw	(0x14, sp), x
      00051B 1E 14            [ 2] 1181 	ldw	x, (0x14, sp)
      00051D A6 40            [ 1] 1182 	ld	a, #0x40
      00051F F7               [ 1] 1183 	ld	(x), a
                                   1184 ;	se8r01-send-current.c: 429: temp[1]=0x01;               
      000520 1E 14            [ 2] 1185 	ldw	x, (0x14, sp)
      000522 5C               [ 2] 1186 	incw	x
      000523 1F 12            [ 2] 1187 	ldw	(0x12, sp), x
      000525 1E 12            [ 2] 1188 	ldw	x, (0x12, sp)
      000527 A6 01            [ 1] 1189 	ld	a, #0x01
      000529 F7               [ 1] 1190 	ld	(x), a
                                   1191 ;	se8r01-send-current.c: 430: temp[2]=0x30;               
      00052A 1E 14            [ 2] 1192 	ldw	x, (0x14, sp)
      00052C 5C               [ 2] 1193 	incw	x
      00052D 5C               [ 2] 1194 	incw	x
      00052E 1F 10            [ 2] 1195 	ldw	(0x10, sp), x
      000530 1E 10            [ 2] 1196 	ldw	x, (0x10, sp)
      000532 A6 30            [ 1] 1197 	ld	a, #0x30
      000534 F7               [ 1] 1198 	ld	(x), a
                                   1199 ;	se8r01-send-current.c: 432: { temp[3]=0xE2; }              
      000535 1E 14            [ 2] 1200 	ldw	x, (0x14, sp)
      000537 1C 00 03         [ 2] 1201 	addw	x, #0x0003
      00053A 1F 06            [ 2] 1202 	ldw	(0x06, sp), x
                                   1203 ;	se8r01-send-current.c: 431: if (SE8R01_DR_2M==1)
      00053C CEu00u00         [ 2] 1204 	ldw	x, _SE8R01_DR_2M+0
      00053F A3 00 01         [ 2] 1205 	cpw	x, #0x0001
      000542 26 07            [ 1] 1206 	jrne	00102$
                                   1207 ;	se8r01-send-current.c: 432: { temp[3]=0xE2; }              
      000544 1E 06            [ 2] 1208 	ldw	x, (0x06, sp)
      000546 A6 E2            [ 1] 1209 	ld	a, #0xe2
      000548 F7               [ 1] 1210 	ld	(x), a
      000549 20 05            [ 2] 1211 	jra	00103$
      00054B                       1212 00102$:
                                   1213 ;	se8r01-send-current.c: 434: { temp[3]=0xE0;}
      00054B 1E 06            [ 2] 1214 	ldw	x, (0x06, sp)
      00054D A6 E0            [ 1] 1215 	ld	a, #0xe0
      00054F F7               [ 1] 1216 	ld	(x), a
      000550                       1217 00103$:
                                   1218 ;	se8r01-send-current.c: 436: write_spi_buf(iRF_CMD_WRITE_REG|iRF_BANK1_PLL_CTL0, temp,4);
      000550 1E 14            [ 2] 1219 	ldw	x, (0x14, sp)
      000552 4B 04            [ 1] 1220 	push	#0x04
      000554 89               [ 2] 1221 	pushw	x
      000555 4B 21            [ 1] 1222 	push	#0x21
      000557 CDr00rA8         [ 4] 1223 	call	_write_spi_buf
      00055A 5B 04            [ 2] 1224 	addw	sp, #4
                                   1225 ;	se8r01-send-current.c: 438: temp[0]=0x29;
      00055C 1E 14            [ 2] 1226 	ldw	x, (0x14, sp)
      00055E A6 29            [ 1] 1227 	ld	a, #0x29
      000560 F7               [ 1] 1228 	ld	(x), a
                                   1229 ;	se8r01-send-current.c: 439: temp[1]=0x89;
      000561 1E 12            [ 2] 1230 	ldw	x, (0x12, sp)
      000563 A6 89            [ 1] 1231 	ld	a, #0x89
      000565 F7               [ 1] 1232 	ld	(x), a
                                   1233 ;	se8r01-send-current.c: 440: temp[2]=0x55;                     
      000566 1E 10            [ 2] 1234 	ldw	x, (0x10, sp)
      000568 A6 55            [ 1] 1235 	ld	a, #0x55
      00056A F7               [ 1] 1236 	ld	(x), a
                                   1237 ;	se8r01-send-current.c: 441: temp[3]=0x40;
      00056B 1E 06            [ 2] 1238 	ldw	x, (0x06, sp)
      00056D A6 40            [ 1] 1239 	ld	a, #0x40
      00056F F7               [ 1] 1240 	ld	(x), a
                                   1241 ;	se8r01-send-current.c: 442: temp[4]=0x50;
      000570 1E 14            [ 2] 1242 	ldw	x, (0x14, sp)
      000572 A6 50            [ 1] 1243 	ld	a, #0x50
      000574 E7 04            [ 1] 1244 	ld	(0x0004, x), a
                                   1245 ;	se8r01-send-current.c: 443: write_spi_buf(iRF_CMD_WRITE_REG|iRF_BANK1_CAL_CTL, temp,5);
      000576 1E 14            [ 2] 1246 	ldw	x, (0x14, sp)
      000578 4B 05            [ 1] 1247 	push	#0x05
      00057A 89               [ 2] 1248 	pushw	x
      00057B 4B 23            [ 1] 1249 	push	#0x23
      00057D CDr00rA8         [ 4] 1250 	call	_write_spi_buf
      000580 5B 04            [ 2] 1251 	addw	sp, #4
                                   1252 ;	se8r01-send-current.c: 445: if (SE8R01_DR_2M==1)
      000582 CEu00u00         [ 2] 1253 	ldw	x, _SE8R01_DR_2M+0
      000585 A3 00 01         [ 2] 1254 	cpw	x, #0x0001
      000588 26 07            [ 1] 1255 	jrne	00105$
                                   1256 ;	se8r01-send-current.c: 446: { temp[0]=0x29;}
      00058A 1E 14            [ 2] 1257 	ldw	x, (0x14, sp)
      00058C A6 29            [ 1] 1258 	ld	a, #0x29
      00058E F7               [ 1] 1259 	ld	(x), a
      00058F 20 05            [ 2] 1260 	jra	00106$
      000591                       1261 00105$:
                                   1262 ;	se8r01-send-current.c: 448: { temp[0]=0x14;}
      000591 1E 14            [ 2] 1263 	ldw	x, (0x14, sp)
      000593 A6 14            [ 1] 1264 	ld	a, #0x14
      000595 F7               [ 1] 1265 	ld	(x), a
      000596                       1266 00106$:
                                   1267 ;	se8r01-send-current.c: 450: write_spi_buf(iRF_CMD_WRITE_REG|iRF_BANK1_FDEV, temp,1);
      000596 1E 14            [ 2] 1268 	ldw	x, (0x14, sp)
      000598 4B 01            [ 1] 1269 	push	#0x01
      00059A 89               [ 2] 1270 	pushw	x
      00059B 4B 2C            [ 1] 1271 	push	#0x2c
      00059D CDr00rA8         [ 4] 1272 	call	_write_spi_buf
      0005A0 5B 04            [ 2] 1273 	addw	sp, #4
                                   1274 ;	se8r01-send-current.c: 452: temp[0]=0x55;
      0005A2 1E 14            [ 2] 1275 	ldw	x, (0x14, sp)
      0005A4 A6 55            [ 1] 1276 	ld	a, #0x55
      0005A6 F7               [ 1] 1277 	ld	(x), a
                                   1278 ;	se8r01-send-current.c: 453: temp[1]=0xC2;
      0005A7 1E 12            [ 2] 1279 	ldw	x, (0x12, sp)
      0005A9 A6 C2            [ 1] 1280 	ld	a, #0xc2
      0005AB F7               [ 1] 1281 	ld	(x), a
                                   1282 ;	se8r01-send-current.c: 454: temp[2]=0x09;
      0005AC 1E 10            [ 2] 1283 	ldw	x, (0x10, sp)
      0005AE A6 09            [ 1] 1284 	ld	a, #0x09
      0005B0 F7               [ 1] 1285 	ld	(x), a
                                   1286 ;	se8r01-send-current.c: 455: temp[3]=0xAC;  
      0005B1 1E 06            [ 2] 1287 	ldw	x, (0x06, sp)
      0005B3 A6 AC            [ 1] 1288 	ld	a, #0xac
      0005B5 F7               [ 1] 1289 	ld	(x), a
                                   1290 ;	se8r01-send-current.c: 456: write_spi_buf(iRF_CMD_WRITE_REG|iRF_BANK1_RX_CTRL,temp,4);
      0005B6 1E 14            [ 2] 1291 	ldw	x, (0x14, sp)
      0005B8 4B 04            [ 1] 1292 	push	#0x04
      0005BA 89               [ 2] 1293 	pushw	x
      0005BB 4B 31            [ 1] 1294 	push	#0x31
      0005BD CDr00rA8         [ 4] 1295 	call	_write_spi_buf
      0005C0 5B 04            [ 2] 1296 	addw	sp, #4
                                   1297 ;	se8r01-send-current.c: 458: temp[0]=0x00;
      0005C2 1E 14            [ 2] 1298 	ldw	x, (0x14, sp)
      0005C4 7F               [ 1] 1299 	clr	(x)
                                   1300 ;	se8r01-send-current.c: 459: temp[1]=0x14;
      0005C5 1E 12            [ 2] 1301 	ldw	x, (0x12, sp)
      0005C7 A6 14            [ 1] 1302 	ld	a, #0x14
      0005C9 F7               [ 1] 1303 	ld	(x), a
                                   1304 ;	se8r01-send-current.c: 460: temp[2]=0x08;   
      0005CA 1E 10            [ 2] 1305 	ldw	x, (0x10, sp)
      0005CC A6 08            [ 1] 1306 	ld	a, #0x08
      0005CE F7               [ 1] 1307 	ld	(x), a
                                   1308 ;	se8r01-send-current.c: 461: temp[3]=0x29;
      0005CF 1E 06            [ 2] 1309 	ldw	x, (0x06, sp)
      0005D1 A6 29            [ 1] 1310 	ld	a, #0x29
      0005D3 F7               [ 1] 1311 	ld	(x), a
                                   1312 ;	se8r01-send-current.c: 462: write_spi_buf(iRF_CMD_WRITE_REG|iRF_BANK1_FAGC_CTRL_1, temp,4);
      0005D4 1E 14            [ 2] 1313 	ldw	x, (0x14, sp)
      0005D6 4B 04            [ 1] 1314 	push	#0x04
      0005D8 89               [ 2] 1315 	pushw	x
      0005D9 4B 33            [ 1] 1316 	push	#0x33
      0005DB CDr00rA8         [ 4] 1317 	call	_write_spi_buf
      0005DE 5B 04            [ 2] 1318 	addw	sp, #4
                                   1319 ;	se8r01-send-current.c: 464: temp[0]=0x02;
      0005E0 1E 14            [ 2] 1320 	ldw	x, (0x14, sp)
      0005E2 A6 02            [ 1] 1321 	ld	a, #0x02
      0005E4 F7               [ 1] 1322 	ld	(x), a
                                   1323 ;	se8r01-send-current.c: 465: temp[1]=0xC1;
      0005E5 1E 12            [ 2] 1324 	ldw	x, (0x12, sp)
      0005E7 A6 C1            [ 1] 1325 	ld	a, #0xc1
      0005E9 F7               [ 1] 1326 	ld	(x), a
                                   1327 ;	se8r01-send-current.c: 466: temp[2]=0xCB;  
      0005EA 1E 10            [ 2] 1328 	ldw	x, (0x10, sp)
      0005EC A6 CB            [ 1] 1329 	ld	a, #0xcb
      0005EE F7               [ 1] 1330 	ld	(x), a
                                   1331 ;	se8r01-send-current.c: 467: temp[3]=0x1C;
      0005EF 1E 06            [ 2] 1332 	ldw	x, (0x06, sp)
      0005F1 A6 1C            [ 1] 1333 	ld	a, #0x1c
      0005F3 F7               [ 1] 1334 	ld	(x), a
                                   1335 ;	se8r01-send-current.c: 468: write_spi_buf(iRF_CMD_WRITE_REG|iRF_BANK1_AGC_GAIN, temp,4);
      0005F4 1E 14            [ 2] 1336 	ldw	x, (0x14, sp)
      0005F6 4B 04            [ 1] 1337 	push	#0x04
      0005F8 89               [ 2] 1338 	pushw	x
      0005F9 4B 3D            [ 1] 1339 	push	#0x3d
      0005FB CDr00rA8         [ 4] 1340 	call	_write_spi_buf
      0005FE 5B 04            [ 2] 1341 	addw	sp, #4
                                   1342 ;	se8r01-send-current.c: 470: temp[0]=0x97;
      000600 1E 14            [ 2] 1343 	ldw	x, (0x14, sp)
      000602 A6 97            [ 1] 1344 	ld	a, #0x97
      000604 F7               [ 1] 1345 	ld	(x), a
                                   1346 ;	se8r01-send-current.c: 471: temp[1]=0x64;
      000605 1E 12            [ 2] 1347 	ldw	x, (0x12, sp)
      000607 A6 64            [ 1] 1348 	ld	a, #0x64
      000609 F7               [ 1] 1349 	ld	(x), a
                                   1350 ;	se8r01-send-current.c: 472: temp[2]=0x00;
      00060A 1E 10            [ 2] 1351 	ldw	x, (0x10, sp)
      00060C 7F               [ 1] 1352 	clr	(x)
                                   1353 ;	se8r01-send-current.c: 473: temp[3]=0x01;
      00060D 1E 06            [ 2] 1354 	ldw	x, (0x06, sp)
      00060F A6 01            [ 1] 1355 	ld	a, #0x01
      000611 F7               [ 1] 1356 	ld	(x), a
                                   1357 ;	se8r01-send-current.c: 474: write_spi_buf(iRF_CMD_WRITE_REG|iRF_BANK1_RF_IVGEN, temp,4);
      000612 1E 14            [ 2] 1358 	ldw	x, (0x14, sp)
      000614 4B 04            [ 1] 1359 	push	#0x04
      000616 89               [ 2] 1360 	pushw	x
      000617 4B 3E            [ 1] 1361 	push	#0x3e
      000619 CDr00rA8         [ 4] 1362 	call	_write_spi_buf
      00061C 5B 04            [ 2] 1363 	addw	sp, #4
                                   1364 ;	se8r01-send-current.c: 476: gtemp[0]=0x2A;
      00061E 1E 0E            [ 2] 1365 	ldw	x, (0x0e, sp)
      000620 A6 2A            [ 1] 1366 	ld	a, #0x2a
      000622 F7               [ 1] 1367 	ld	(x), a
                                   1368 ;	se8r01-send-current.c: 477: gtemp[1]=0x04;
      000623 1E 0C            [ 2] 1369 	ldw	x, (0x0c, sp)
      000625 A6 04            [ 1] 1370 	ld	a, #0x04
      000627 F7               [ 1] 1371 	ld	(x), a
                                   1372 ;	se8r01-send-current.c: 478: gtemp[2]=0x00;
      000628 1E 0A            [ 2] 1373 	ldw	x, (0x0a, sp)
      00062A 7F               [ 1] 1374 	clr	(x)
                                   1375 ;	se8r01-send-current.c: 479: gtemp[3]=0x7D;
      00062B 1E 08            [ 2] 1376 	ldw	x, (0x08, sp)
      00062D A6 7D            [ 1] 1377 	ld	a, #0x7d
      00062F F7               [ 1] 1378 	ld	(x), a
                                   1379 ;	se8r01-send-current.c: 480: write_spi_buf(iRF_CMD_WRITE_REG|iRF_BANK1_TEST_PKDET, gtemp, 4);
      000630 1E 0E            [ 2] 1380 	ldw	x, (0x0e, sp)
      000632 4B 04            [ 1] 1381 	push	#0x04
      000634 89               [ 2] 1382 	pushw	x
      000635 4B 3F            [ 1] 1383 	push	#0x3f
      000637 CDr00rA8         [ 4] 1384 	call	_write_spi_buf
      00063A 5B 04            [ 2] 1385 	addw	sp, #4
                                   1386 ;	se8r01-send-current.c: 482: rf_switch_bank(iBANK0);
      00063C 4B 00            [ 1] 1387 	push	#0x00
      00063E CDr02rE0         [ 4] 1388 	call	_rf_switch_bank
      000641 84               [ 1] 1389 	pop	a
      000642 5B 15            [ 2] 1390 	addw	sp, #21
      000644 81               [ 4] 1391 	ret
                                   1392 ;	se8r01-send-current.c: 485: void SE8R01_Init()  
                                   1393 ;	-----------------------------------------
                                   1394 ;	 function SE8R01_Init
                                   1395 ;	-----------------------------------------
      000645                       1396 _SE8R01_Init:
      000645 52 05            [ 2] 1397 	sub	sp, #5
                                   1398 ;	se8r01-send-current.c: 488: SE8R01_Calibration();   
      000647 CDr02rFD         [ 4] 1399 	call	_SE8R01_Calibration
                                   1400 ;	se8r01-send-current.c: 489: SE8R01_Analog_Init();   
      00064A CDr04rC9         [ 4] 1401 	call	_SE8R01_Analog_Init
                                   1402 ;	se8r01-send-current.c: 493: if (SE8R01_DR_2M==1)
      00064D CEu00u00         [ 2] 1403 	ldw	x, _SE8R01_DR_2M+0
      000650 A3 00 01         [ 2] 1404 	cpw	x, #0x0001
      000653 26 07            [ 1] 1405 	jrne	00105$
                                   1406 ;	se8r01-send-current.c: 494: {  temp[0]=0b01001111; }     //2MHz,+5dbm
      000655 96               [ 1] 1407 	ldw	x, sp
      000656 5C               [ 2] 1408 	incw	x
      000657 A6 4F            [ 1] 1409 	ld	a, #0x4f
      000659 F7               [ 1] 1410 	ld	(x), a
      00065A 20 14            [ 2] 1411 	jra	00106$
      00065C                       1412 00105$:
                                   1413 ;	se8r01-send-current.c: 495: else if  (SE8R01_DR_1M==1)
      00065C CEu00u02         [ 2] 1414 	ldw	x, _SE8R01_DR_1M+0
      00065F A3 00 01         [ 2] 1415 	cpw	x, #0x0001
      000662 26 07            [ 1] 1416 	jrne	00102$
                                   1417 ;	se8r01-send-current.c: 496: {  temp[0]=0b01000111;  }     //1MHz,+5dbm
      000664 96               [ 1] 1418 	ldw	x, sp
      000665 5C               [ 2] 1419 	incw	x
      000666 A6 47            [ 1] 1420 	ld	a, #0x47
      000668 F7               [ 1] 1421 	ld	(x), a
      000669 20 05            [ 2] 1422 	jra	00106$
      00066B                       1423 00102$:
                                   1424 ;	se8r01-send-current.c: 498: {temp[0]=0b01101111;  }     //500K,+5dbm
      00066B 96               [ 1] 1425 	ldw	x, sp
      00066C 5C               [ 2] 1426 	incw	x
      00066D A6 6F            [ 1] 1427 	ld	a, #0x6f
      00066F F7               [ 1] 1428 	ld	(x), a
      000670                       1429 00106$:
                                   1430 ;	se8r01-send-current.c: 500: write_spi_buf(iRF_CMD_WRITE_REG|iRF_BANK0_RF_SETUP,temp,1);
      000670 96               [ 1] 1431 	ldw	x, sp
      000671 5C               [ 2] 1432 	incw	x
      000672 4B 01            [ 1] 1433 	push	#0x01
      000674 89               [ 2] 1434 	pushw	x
      000675 4B 26            [ 1] 1435 	push	#0x26
      000677 CDr00rA8         [ 4] 1436 	call	_write_spi_buf
      00067A 5B 04            [ 2] 1437 	addw	sp, #4
                                   1438 ;	se8r01-send-current.c: 502: write_spi_reg(WRITE_REG|iRF_BANK0_EN_AA, 0x01);          //enable auto acc on pip 1
      00067C 4B 01            [ 1] 1439 	push	#0x01
      00067E 4B 21            [ 1] 1440 	push	#0x21
      000680 CDr00r2E         [ 4] 1441 	call	_write_spi_reg
      000683 5B 02            [ 2] 1442 	addw	sp, #2
                                   1443 ;	se8r01-send-current.c: 503: write_spi_reg(WRITE_REG|iRF_BANK0_EN_RXADDR, 0x01);      //enable pip 1
      000685 4B 01            [ 1] 1444 	push	#0x01
      000687 4B 22            [ 1] 1445 	push	#0x22
      000689 CDr00r2E         [ 4] 1446 	call	_write_spi_reg
      00068C 5B 02            [ 2] 1447 	addw	sp, #2
                                   1448 ;	se8r01-send-current.c: 504: write_spi_reg(WRITE_REG|iRF_BANK0_SETUP_AW, 0x02);        //4 byte adress
      00068E 4B 02            [ 1] 1449 	push	#0x02
      000690 4B 23            [ 1] 1450 	push	#0x23
      000692 CDr00r2E         [ 4] 1451 	call	_write_spi_reg
      000695 5B 02            [ 2] 1452 	addw	sp, #2
                                   1453 ;	se8r01-send-current.c: 505: write_spi_reg(WRITE_REG|iRF_BANK0_SETUP_RETR, 0x08);        //lowest 4 bits 0-15 rt transmisston higest 4 bits 256-4096us Auto Retransmit Delay
      000697 4B 08            [ 1] 1454 	push	#0x08
      000699 4B 24            [ 1] 1455 	push	#0x24
      00069B CDr00r2E         [ 4] 1456 	call	_write_spi_reg
      00069E 5B 02            [ 2] 1457 	addw	sp, #2
                                   1458 ;	se8r01-send-current.c: 506: write_spi_reg(WRITE_REG|iRF_BANK0_RF_CH, 40);
      0006A0 4B 28            [ 1] 1459 	push	#0x28
      0006A2 4B 25            [ 1] 1460 	push	#0x25
      0006A4 CDr00r2E         [ 4] 1461 	call	_write_spi_reg
      0006A7 5B 02            [ 2] 1462 	addw	sp, #2
                                   1463 ;	se8r01-send-current.c: 507: write_spi_reg(WRITE_REG|iRF_BANK0_DYNPD, 0x01);          //pipe0 pipe1 enable dynamic payload length data
      0006A9 4B 01            [ 1] 1464 	push	#0x01
      0006AB 4B 3C            [ 1] 1465 	push	#0x3c
      0006AD CDr00r2E         [ 4] 1466 	call	_write_spi_reg
      0006B0 5B 02            [ 2] 1467 	addw	sp, #2
                                   1468 ;	se8r01-send-current.c: 508: write_spi_reg(WRITE_REG|iRF_BANK0_FEATURE, 0x07);        // enable dynamic paload lenght; enbale payload with ack enable w_tx_payload_noack
      0006B2 4B 07            [ 1] 1469 	push	#0x07
      0006B4 4B 3D            [ 1] 1470 	push	#0x3d
      0006B6 CDr00r2E         [ 4] 1471 	call	_write_spi_reg
      0006B9 5B 02            [ 2] 1472 	addw	sp, #2
                                   1473 ;	se8r01-send-current.c: 509: write_spi_reg(WRITE_REG + CONFIG, 0x3E);
      0006BB 4B 3E            [ 1] 1474 	push	#0x3e
      0006BD 4B 20            [ 1] 1475 	push	#0x20
      0006BF CDr00r2E         [ 4] 1476 	call	_write_spi_reg
      0006C2 5B 02            [ 2] 1477 	addw	sp, #2
                                   1478 ;	se8r01-send-current.c: 510: write_spi_buf(WRITE_REG + TX_ADDR, TX_ADDRESS, ADR_WIDTH);  //from tx
      0006C4 AEr00r0E         [ 2] 1479 	ldw	x, #_TX_ADDRESS+0
      0006C7 90 93            [ 1] 1480 	ldw	y, x
      0006C9 89               [ 2] 1481 	pushw	x
      0006CA 4B 04            [ 1] 1482 	push	#0x04
      0006CC 90 89            [ 2] 1483 	pushw	y
      0006CE 4B 30            [ 1] 1484 	push	#0x30
      0006D0 CDr00rA8         [ 4] 1485 	call	_write_spi_buf
      0006D3 5B 04            [ 2] 1486 	addw	sp, #4
      0006D5 85               [ 2] 1487 	popw	x
                                   1488 ;	se8r01-send-current.c: 512: write_spi_buf(WRITE_REG + RX_ADDR_P0, TX_ADDRESS, ADR_WIDTH); // Use the same address on the RX device as the TX device write_spi_reg(WRITE_REG + RX_PW_P0, TX_PLOAD_WIDTH); // Select same RX payload width as TX Payload width
      0006D6 4B 04            [ 1] 1489 	push	#0x04
      0006D8 89               [ 2] 1490 	pushw	x
      0006D9 4B 2A            [ 1] 1491 	push	#0x2a
      0006DB CDr00rA8         [ 4] 1492 	call	_write_spi_buf
      0006DE 5B 04            [ 2] 1493 	addw	sp, #4
                                   1494 ;	se8r01-send-current.c: 533: PC_ODR |= (1 << CE);
      0006E0 AE 50 0A         [ 2] 1495 	ldw	x, #0x500a
      0006E3 F6               [ 1] 1496 	ld	a, (x)
      0006E4 AA 10            [ 1] 1497 	or	a, #0x10
      0006E6 F7               [ 1] 1498 	ld	(x), a
      0006E7 5B 05            [ 2] 1499 	addw	sp, #5
      0006E9 81               [ 4] 1500 	ret
                                   1501 ;	se8r01-send-current.c: 539: int main () {
                                   1502 ;	-----------------------------------------
                                   1503 ;	 function main
                                   1504 ;	-----------------------------------------
      0006EA                       1505 _main:
      0006EA 52 33            [ 2] 1506 	sub	sp, #51
                                   1507 ;	se8r01-send-current.c: 541: UCHAR rx_addr_p1[]  = { 0xd2, 0xf0, 0xf0, 0xf0, 0xf0 };
      0006EC 90 96            [ 1] 1508 	ldw	y, sp
      0006EE 72 A9 00 2D      [ 2] 1509 	addw	y, #45
      0006F2 A6 D2            [ 1] 1510 	ld	a, #0xd2
      0006F4 90 F7            [ 1] 1511 	ld	(y), a
      0006F6 93               [ 1] 1512 	ldw	x, y
      0006F7 5C               [ 2] 1513 	incw	x
      0006F8 A6 F0            [ 1] 1514 	ld	a, #0xf0
      0006FA F7               [ 1] 1515 	ld	(x), a
      0006FB 93               [ 1] 1516 	ldw	x, y
      0006FC 5C               [ 2] 1517 	incw	x
      0006FD 5C               [ 2] 1518 	incw	x
      0006FE A6 F0            [ 1] 1519 	ld	a, #0xf0
      000700 F7               [ 1] 1520 	ld	(x), a
      000701 93               [ 1] 1521 	ldw	x, y
      000702 A6 F0            [ 1] 1522 	ld	a, #0xf0
      000704 E7 03            [ 1] 1523 	ld	(0x0003, x), a
      000706 93               [ 1] 1524 	ldw	x, y
      000707 A6 F0            [ 1] 1525 	ld	a, #0xf0
      000709 E7 04            [ 1] 1526 	ld	(0x0004, x), a
                                   1527 ;	se8r01-send-current.c: 542: UCHAR tx_addr[]     = { 0xe1, 0xf0, 0xf0, 0xf0, 0xf0 };
      00070B 90 96            [ 1] 1528 	ldw	y, sp
      00070D 72 A9 00 28      [ 2] 1529 	addw	y, #40
      000711 A6 E1            [ 1] 1530 	ld	a, #0xe1
      000713 90 F7            [ 1] 1531 	ld	(y), a
      000715 93               [ 1] 1532 	ldw	x, y
      000716 5C               [ 2] 1533 	incw	x
      000717 A6 F0            [ 1] 1534 	ld	a, #0xf0
      000719 F7               [ 1] 1535 	ld	(x), a
      00071A 93               [ 1] 1536 	ldw	x, y
      00071B 5C               [ 2] 1537 	incw	x
      00071C 5C               [ 2] 1538 	incw	x
      00071D A6 F0            [ 1] 1539 	ld	a, #0xf0
      00071F F7               [ 1] 1540 	ld	(x), a
      000720 93               [ 1] 1541 	ldw	x, y
      000721 A6 F0            [ 1] 1542 	ld	a, #0xf0
      000723 E7 03            [ 1] 1543 	ld	(0x0003, x), a
      000725 93               [ 1] 1544 	ldw	x, y
      000726 1C 00 04         [ 2] 1545 	addw	x, #0x0004
      000729 A6 F0            [ 1] 1546 	ld	a, #0xf0
      00072B F7               [ 1] 1547 	ld	(x), a
                                   1548 ;	se8r01-send-current.c: 546: InitializeSystemClock();
      00072C CDr01r44         [ 4] 1549 	call	_InitializeSystemClock
                                   1550 ;	se8r01-send-current.c: 547: InitializeUART();
      00072F CDr02r3C         [ 4] 1551 	call	_InitializeUART
                                   1552 ;	se8r01-send-current.c: 549: InitializeSPI ();
      000732 CDr01r1C         [ 4] 1553 	call	_InitializeSPI
                                   1554 ;	se8r01-send-current.c: 552: memset (tx_payload, 0, sizeof(tx_payload));
      000735 96               [ 1] 1555 	ldw	x, sp
      000736 5C               [ 2] 1556 	incw	x
      000737 1F 32            [ 2] 1557 	ldw	(0x32, sp), x
      000739 16 32            [ 2] 1558 	ldw	y, (0x32, sp)
      00073B 4B 21            [ 1] 1559 	push	#0x21
      00073D 4B 00            [ 1] 1560 	push	#0x00
      00073F 5F               [ 1] 1561 	clrw	x
      000740 89               [ 2] 1562 	pushw	x
      000741 90 89            [ 2] 1563 	pushw	y
      000743 CDr00r00         [ 4] 1564 	call	_memset
      000746 5B 06            [ 2] 1565 	addw	sp, #6
                                   1566 ;	se8r01-send-current.c: 555: init_io();                        // Initialize IO port
      000748 CDr02rB5         [ 4] 1567 	call	_init_io
                                   1568 ;	se8r01-send-current.c: 556: write_spi_reg(FLUSH_TX,0); // transmit -- send data 
      00074B 4B 00            [ 1] 1569 	push	#0x00
      00074D 4B E1            [ 1] 1570 	push	#0xe1
      00074F CDr00r2E         [ 4] 1571 	call	_write_spi_reg
      000752 5B 02            [ 2] 1572 	addw	sp, #2
                                   1573 ;	se8r01-send-current.c: 557: readstatus = read_spi_reg(CONFIG);
      000754 4B 00            [ 1] 1574 	push	#0x00
      000756 CDr00r6A         [ 4] 1575 	call	_read_spi_reg
      000759 5B 01            [ 2] 1576 	addw	sp, #1
                                   1577 ;	se8r01-send-current.c: 558: UARTPrintF("config = \n\r");
      00075B AEr07rE9         [ 2] 1578 	ldw	x, #___str_0+0
      00075E 88               [ 1] 1579 	push	a
      00075F 89               [ 2] 1580 	pushw	x
      000760 CDr01rD9         [ 4] 1581 	call	_UARTPrintF
      000763 5B 02            [ 2] 1582 	addw	sp, #2
      000765 84               [ 1] 1583 	pop	a
                                   1584 ;	se8r01-send-current.c: 559: print_UCHAR_hex(readstatus);
      000766 88               [ 1] 1585 	push	a
      000767 CDr01rF0         [ 4] 1586 	call	_print_UCHAR_hex
      00076A 84               [ 1] 1587 	pop	a
                                   1588 ;	se8r01-send-current.c: 560: readstatus = read_spi_reg(STATUS);
      00076B 4B 07            [ 1] 1589 	push	#0x07
      00076D CDr00r6A         [ 4] 1590 	call	_read_spi_reg
      000770 5B 01            [ 2] 1591 	addw	sp, #1
                                   1592 ;	se8r01-send-current.c: 561: UARTPrintF("status = \n\r");
      000772 AEr07rF5         [ 2] 1593 	ldw	x, #___str_1+0
      000775 88               [ 1] 1594 	push	a
      000776 89               [ 2] 1595 	pushw	x
      000777 CDr01rD9         [ 4] 1596 	call	_UARTPrintF
      00077A 5B 02            [ 2] 1597 	addw	sp, #2
      00077C 84               [ 1] 1598 	pop	a
                                   1599 ;	se8r01-send-current.c: 562: print_UCHAR_hex(readstatus);
      00077D 88               [ 1] 1600 	push	a
      00077E CDr01rF0         [ 4] 1601 	call	_print_UCHAR_hex
      000781 84               [ 1] 1602 	pop	a
                                   1603 ;	se8r01-send-current.c: 564: SE8R01_Init();
      000782 CDr06r45         [ 4] 1604 	call	_SE8R01_Init
                                   1605 ;	se8r01-send-current.c: 568: while (1) {
      000785                       1606 00105$:
                                   1607 ;	se8r01-send-current.c: 570: tx_payload[0] = 0xac; //first two is unique ID for current sensor
      000785 1E 32            [ 2] 1608 	ldw	x, (0x32, sp)
      000787 A6 AC            [ 1] 1609 	ld	a, #0xac
      000789 F7               [ 1] 1610 	ld	(x), a
                                   1611 ;	se8r01-send-current.c: 571: tx_payload[1] = 0xcc;
      00078A 1E 32            [ 2] 1612 	ldw	x, (0x32, sp)
      00078C 5C               [ 2] 1613 	incw	x
      00078D A6 CC            [ 1] 1614 	ld	a, #0xcc
      00078F F7               [ 1] 1615 	ld	(x), a
                                   1616 ;	se8r01-send-current.c: 572: tx_payload[2] = 0x01;
      000790 1E 32            [ 2] 1617 	ldw	x, (0x32, sp)
      000792 5C               [ 2] 1618 	incw	x
      000793 5C               [ 2] 1619 	incw	x
      000794 A6 01            [ 1] 1620 	ld	a, #0x01
      000796 F7               [ 1] 1621 	ld	(x), a
                                   1622 ;	se8r01-send-current.c: 573: tx_payload[3] = 0x02;
      000797 1E 32            [ 2] 1623 	ldw	x, (0x32, sp)
      000799 A6 02            [ 1] 1624 	ld	a, #0x02
      00079B E7 03            [ 1] 1625 	ld	(0x0003, x), a
                                   1626 ;	se8r01-send-current.c: 574: write_spi_buf(iRF_CMD_WR_TX_PLOAD, tx_payload, 4);
      00079D 1E 32            [ 2] 1627 	ldw	x, (0x32, sp)
      00079F 4B 04            [ 1] 1628 	push	#0x04
      0007A1 89               [ 2] 1629 	pushw	x
      0007A2 4B A0            [ 1] 1630 	push	#0xa0
      0007A4 CDr00rA8         [ 4] 1631 	call	_write_spi_buf
      0007A7 5B 04            [ 2] 1632 	addw	sp, #4
                                   1633 ;	se8r01-send-current.c: 575: write_spi_reg(WRITE_REG+STATUS, 0xff);
      0007A9 4B FF            [ 1] 1634 	push	#0xff
      0007AB 4B 27            [ 1] 1635 	push	#0x27
      0007AD CDr00r2E         [ 4] 1636 	call	_write_spi_reg
      0007B0 5B 02            [ 2] 1637 	addw	sp, #2
                                   1638 ;	se8r01-send-current.c: 582: for (x1 = 0; x1 < 50; ++x1)
      0007B2 5F               [ 1] 1639 	clrw	x
      0007B3 1F 26            [ 2] 1640 	ldw	(0x26, sp), x
      0007B5                       1641 00114$:
      0007B5 1E 26            [ 2] 1642 	ldw	x, (0x26, sp)
      0007B7 A3 00 32         [ 2] 1643 	cpw	x, #0x0032
      0007BA 2E C9            [ 1] 1644 	jrsge	00105$
                                   1645 ;	se8r01-send-current.c: 583: for (y1 = 0; y1 < 50; ++y1)
      0007BC 5F               [ 1] 1646 	clrw	x
      0007BD 1F 24            [ 2] 1647 	ldw	(0x24, sp), x
      0007BF                       1648 00111$:
      0007BF 1E 24            [ 2] 1649 	ldw	x, (0x24, sp)
      0007C1 A3 00 32         [ 2] 1650 	cpw	x, #0x0032
      0007C4 2E 19            [ 1] 1651 	jrsge	00115$
                                   1652 ;	se8r01-send-current.c: 584: for (z1 = 0; z1 < 50; ++z1)
      0007C6 5F               [ 1] 1653 	clrw	x
      0007C7 1F 22            [ 2] 1654 	ldw	(0x22, sp), x
      0007C9                       1655 00108$:
      0007C9 1E 22            [ 2] 1656 	ldw	x, (0x22, sp)
      0007CB A3 00 32         [ 2] 1657 	cpw	x, #0x0032
      0007CE 2E 08            [ 1] 1658 	jrsge	00112$
                                   1659 ;	se8r01-send-current.c: 585: __asm__("nop");
      0007D0 9D               [ 1] 1660 	nop
                                   1661 ;	se8r01-send-current.c: 584: for (z1 = 0; z1 < 50; ++z1)
      0007D1 1E 22            [ 2] 1662 	ldw	x, (0x22, sp)
      0007D3 5C               [ 2] 1663 	incw	x
      0007D4 1F 22            [ 2] 1664 	ldw	(0x22, sp), x
      0007D6 20 F1            [ 2] 1665 	jra	00108$
      0007D8                       1666 00112$:
                                   1667 ;	se8r01-send-current.c: 583: for (y1 = 0; y1 < 50; ++y1)
      0007D8 1E 24            [ 2] 1668 	ldw	x, (0x24, sp)
      0007DA 5C               [ 2] 1669 	incw	x
      0007DB 1F 24            [ 2] 1670 	ldw	(0x24, sp), x
      0007DD 20 E0            [ 2] 1671 	jra	00111$
      0007DF                       1672 00115$:
                                   1673 ;	se8r01-send-current.c: 582: for (x1 = 0; x1 < 50; ++x1)
      0007DF 1E 26            [ 2] 1674 	ldw	x, (0x26, sp)
      0007E1 5C               [ 2] 1675 	incw	x
      0007E2 1F 26            [ 2] 1676 	ldw	(0x26, sp), x
      0007E4 20 CF            [ 2] 1677 	jra	00114$
      0007E6 5B 33            [ 2] 1678 	addw	sp, #51
      0007E8 81               [ 4] 1679 	ret
                                   1680 	.area CODE
      0007E9                       1681 ___str_0:
      0007E9 63 6F 6E 66 69 67 20  1682 	.ascii "config = "
             3D 20
      0007F2 0A                    1683 	.db 0x0A
      0007F3 0D                    1684 	.db 0x0D
      0007F4 00                    1685 	.db 0x00
      0007F5                       1686 ___str_1:
      0007F5 73 74 61 74 75 73 20  1687 	.ascii "status = "
             3D 20
      0007FE 0A                    1688 	.db 0x0A
      0007FF 0D                    1689 	.db 0x0D
      000800 00                    1690 	.db 0x00
                                   1691 	.area INITIALIZER
      000000                       1692 __xinit__SE8R01_DR_2M:
      000000 00 00                 1693 	.dw #0x0000
      000002                       1694 __xinit__SE8R01_DR_1M:
      000002 00 00                 1695 	.dw #0x0000
      000004                       1696 __xinit__SE8R01_DR_500K:
      000004 00 01                 1697 	.dw #0x0001
      000006                       1698 __xinit__pload_width_now:
      000006 00 00                 1699 	.dw #0x0000
      000008                       1700 __xinit__newdata:
      000008 00 00                 1701 	.dw #0x0000
      00000A                       1702 __xinit__signal_lv:
      00000A 00                    1703 	.db #0x00	;  0
      00000B                       1704 __xinit__pip:
      00000B 00 00                 1705 	.dw #0x0000
      00000D                       1706 __xinit__status:
      00000D 00                    1707 	.db #0x00	; 0
      00000E                       1708 __xinit__TX_ADDRESS:
      00000E B3                    1709 	.db #0xB3	; 179
      00000F 43                    1710 	.db #0x43	; 67	'C'
      000010 10                    1711 	.db #0x10	; 16
      000011 10                    1712 	.db #0x10	; 16
      000012                       1713 __xinit__ADDRESS2:
      000012 B1                    1714 	.db #0xB1	; 177
      000013                       1715 __xinit__ADDRESS3:
      000013 B2                    1716 	.db #0xB2	; 178
      000014                       1717 __xinit__ADDRESS4:
      000014 B3                    1718 	.db #0xB3	; 179
      000015                       1719 __xinit__ADDRESS5:
      000015 B4                    1720 	.db #0xB4	; 180
      000016                       1721 __xinit__ADDRESS1:
      000016 B0                    1722 	.db #0xB0	; 176
      000017 43                    1723 	.db #0x43	; 67	'C'
      000018 10                    1724 	.db #0x10	; 16
      000019 10                    1725 	.db #0x10	; 16
      00001A                       1726 __xinit__ADDRESS0:
      00001A 34                    1727 	.db #0x34	; 52	'4'
      00001B 43                    1728 	.db #0x43	; 67	'C'
      00001C 10                    1729 	.db #0x10	; 16
      00001D 10                    1730 	.db #0x10	; 16
      00001E                       1731 __xinit__rx_buf:
      00001E 00                    1732 	.db #0x00	; 0
      00001F 00                    1733 	.db 0x00
      000020 00                    1734 	.db 0x00
      000021 00                    1735 	.db 0x00
      000022 00                    1736 	.db 0x00
      000023 00                    1737 	.db 0x00
      000024 00                    1738 	.db 0x00
      000025 00                    1739 	.db 0x00
      000026 00                    1740 	.db 0x00
      000027 00                    1741 	.db 0x00
      000028 00                    1742 	.db 0x00
      000029 00                    1743 	.db 0x00
      00002A 00                    1744 	.db 0x00
      00002B 00                    1745 	.db 0x00
      00002C 00                    1746 	.db 0x00
      00002D 00                    1747 	.db 0x00
      00002E 00                    1748 	.db 0x00
      00002F 00                    1749 	.db 0x00
      000030 00                    1750 	.db 0x00
      000031 00                    1751 	.db 0x00
      000032 00                    1752 	.db 0x00
      000033 00                    1753 	.db 0x00
      000034 00                    1754 	.db 0x00
      000035 00                    1755 	.db 0x00
      000036 00                    1756 	.db 0x00
      000037 00                    1757 	.db 0x00
      000038 00                    1758 	.db 0x00
      000039 00                    1759 	.db 0x00
      00003A 00                    1760 	.db 0x00
      00003B 00                    1761 	.db 0x00
      00003C 00                    1762 	.db 0x00
      00003D 00                    1763 	.db 0x00
      00003E                       1764 __xinit__tx_buf:
      00003E 00                    1765 	.db #0x00	; 0
      00003F 00                    1766 	.db 0x00
      000040 00                    1767 	.db 0x00
      000041 00                    1768 	.db 0x00
      000042 00                    1769 	.db 0x00
      000043 00                    1770 	.db 0x00
      000044 00                    1771 	.db 0x00
      000045 00                    1772 	.db 0x00
      000046 00                    1773 	.db 0x00
      000047 00                    1774 	.db 0x00
      000048 00                    1775 	.db 0x00
      000049 00                    1776 	.db 0x00
      00004A 00                    1777 	.db 0x00
      00004B 00                    1778 	.db 0x00
      00004C 00                    1779 	.db 0x00
      00004D 00                    1780 	.db 0x00
      00004E 00                    1781 	.db 0x00
      00004F 00                    1782 	.db 0x00
      000050 00                    1783 	.db 0x00
      000051 00                    1784 	.db 0x00
      000052 00                    1785 	.db 0x00
      000053 00                    1786 	.db 0x00
      000054 00                    1787 	.db 0x00
      000055 00                    1788 	.db 0x00
      000056 00                    1789 	.db 0x00
      000057 00                    1790 	.db 0x00
      000058 00                    1791 	.db 0x00
      000059 00                    1792 	.db 0x00
      00005A 00                    1793 	.db 0x00
      00005B 00                    1794 	.db 0x00
      00005C 00                    1795 	.db 0x00
      00005D 00                    1796 	.db 0x00
                                   1797 	.area CABS (ABS)
